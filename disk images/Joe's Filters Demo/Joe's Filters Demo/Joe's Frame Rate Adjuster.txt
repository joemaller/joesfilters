//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.org	filter "Joe's Frame Rate Adjuster";group "Joe's Video & Time Filters";//input formatting, "Number Format", popup, 2, "kInteger", "kfloat2", "kfloat4", "kFloat6", "k30fps"input varfps, "Frame Rate", Slider, 24, 1, 60 label "fps";//input blanker, "Blanker", Checkbox, 0;input mtrail, "Motion Trail", Slider, 33, 0, 100 label "%";//input stats, "stats", Checkbox, 0;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";codefloat zoomfactor, w, h, sourceDuration, sourceOffset, aspect, fieldswitch;dimensionsOf(Dest, w, h);aspect = aspectOf(dest);fieldswitch = integer(aspect + 0.5); // results in 1 or 2, should use fieldprocessing in future versions image xbuffer[w][h*fieldswitch];zoomfactor = w/720;dest = src1;float cliptime, varDuration, varRatio, varFrame, playbackframe, i, j, FieldPicker, fixFps, fixDuration;point framebox[4], fieldbox[4]fixFps = fps * fieldswitch;	//field-corrected frame rate (this is not the true fps, rather it's the FCP 30/60 fps, should there be a  29.97 catch?fixDuration = duration //can probably remove this now...//the first thing to do is to rebuild the basic FXScript time constants based on the variable frame ratecliptime = fixduration/fixfps;					// field-corrected duration in secondsvarDuration = integer(cliptime * varfps);		// meta-duration based on user input fpsvarFrame = integer(varDuration * ratio); 		// meta-framecount at variable frame ratevarRatio = varFrame/varDuration;				// fractional position of the meta-frame, same as frame/duration=ratioplaybackframe = varRatio * duration;getLimits(clip1, sourceDuration, sourceOffset);getvideo(clip1, integer(playbackframe/fieldswitch) - sourceOffset, xbuffer);boundsof(xbuffer, framebox);boundsof(dest, fieldbox);FieldPicker = (playbackframe/fieldswitch - integer(playbackframe/fieldswitch) < 0.5) ? 1 : 0;j = fieldbox[0].y;for i = framebox[0].y to framebox[2].y step fieldswitch;	framebox[0].y = i + FieldPicker;			framebox[1].y = i + FieldPicker;		framebox[2].y = i + 1 + FieldPicker;	framebox[3].y = i + 1 + FieldPicker;			fieldbox[0].y = j;	// j starts at the topmost row of pixels in outfield and counts up	fieldbox[1].y = j;		fieldbox[2].y = j + 1;	fieldbox[3].y = j + 1;				j++		// increases the target row, used to build a half-height image.		BlitRect(xbuffer, framebox, dest, fieldbox); // copy the contents of the selected fieldnext;if (mtrail > 0)	image nextframe[w][h];	playbackframe = varRatio * duration - 1;	getvideo(clip1, integer(playbackframe/fieldswitch) - sourceOffset, xbuffer);	FieldPicker = (playbackframe/fieldswitch - integer(playbackframe/fieldswitch) < 0.5) ? 1 : 0;		boundsof(xbuffer, framebox);	boundsof(dest, fieldbox);	j = fieldbox[0].y;		for i = framebox[0].y to framebox[2].y step fieldswitch;			framebox[0].y = i + FieldPicker;				framebox[1].y = i + FieldPicker;			framebox[2].y = i + 1 + FieldPicker;		framebox[3].y = i + 1 + FieldPicker;					fieldbox[0].y = j;	// j starts at the topmost row of pixels in outfield and counts up		fieldbox[1].y = j;			fieldbox[2].y = j + 1;		fieldbox[3].y = j + 1;						j++		// increases the target row, used to build a half-height image.				BlitRect(xbuffer, framebox, nextframe, fieldbox); // copy the contents of the selected field	next;			matte(nextframe,dest, dest, mtrail/100, kalpha);end if