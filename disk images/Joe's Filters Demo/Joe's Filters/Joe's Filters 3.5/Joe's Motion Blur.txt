//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.org		filter "Joe's Motion Blur";group "Joe's Blur Filters";input BlurDirection, "Direction", angle, 90, -360, 360 detent -90, -180, -270, -360; input distance, "Distance", slider, 10, 0, 500 ramp 85;input edgeRepeat, "Repeat Edges", checkbox, 1input target, "Target", radiogroup, 1, "YUV (YCrCb)", "RGB";input rY, "Luma / Red", CheckBox, 1input gU, "Cb / Green", CheckBox, 1input bV, "Cr / Blue", CheckBox, 1input aA, "Alpha", CheckBox, 1//input stretch, "stretch", slider, 0.0001, 0.00001, 0.1input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";InformationFlag("YUVaware");ProducesAlphacodeexposedbackground=1float w, h, Fw, Fh, colorSpace, j;point origin, srcRect[4], srcRect2[4], blurRect[4], blurRect2[4], longRect[4], tallRect[4];colorSpace = GetPixelFormat(dest);			//store this for final conversion at the enddimensionsOf(Dest, w, h);float zoomfactor; zoomfactor = w/720;Boundsof(dest, srcRect);centerOf(srcRect, origin);blurRect = srcRect;longRect = srcRect;tallRect = srcRect;for j = 0 to 3	longRect[j].x *= 2;		tallRect[j].y *= 2;next;j = (edgeRepeat) ? 0 : 5;Rotate(blurRect, origin, 360 - BlurDirection, aspectOf(dest));Rotate(longRect, origin, 360 - BlurDirection, aspectOf(dest));			// possibly do this with sin/cos for speed boost?Rotate(tallRect, origin, 360 - BlurDirection, aspectOf(dest));Fw = (abs(blurRect[2].x - blurRect[0].x) > abs(blurRect[3].x - blurRect[1].x)) ? abs(blurRect[2].x - blurRect[0].x) + j : abs(blurRect[3].x - blurRect[1].x) + j	//the "+5" dimension is because the measurements seem to be slightly larger than reported.Fh = (abs(blurRect[2].y - blurRect[0].y) > abs(blurRect[3].y - blurRect[1].y)) ? abs(blurRect[2].y - blurRect[0].y) + j : abs(blurRect[3].y - blurRect[1].y) + j																																						image xbuffer[w][h], blurbuffer[Fw][Fh], blurbuffer2[Fw][Fh];// a Blit bug in versions of FCP before 3.0 offsets the poly used for a target, // so anything going into Blit needs to be backed up firstblurRect2 = BlurRectsrcRect2 = srcRect;if (colorSpace == kformatYUV219)	channelfill(blurBuffer, 0,0,128,128);else //rgb		channelfill(blurBuffer, 0,0,0,0);end ifblitRect(src1, srcRect, blurBuffer, blurRect); // first rotationif (edgeRepeat)	// edge repeat bottom	srcRect = srcRect2;		// bottom line	srcRect[0].y = srcRect[3].y + 1;	srcRect[1].y = srcRect[2].y + 1;		blurRect = blurRect2;		//bottom edge repeat	blurRect[0] = blurRect2[3];	blurRect[1] = blurRect2[2];	blurRect[2] =  tallRect[2];	blurRect[3] =  tallRect[3];		blitRect(src1, srcRect, blurBuffer, blurRect);		// edge repeat top	srcRect = srcRect2;		// top line	srcRect[2].y = srcRect[1].y - 1;	srcRect[3].y = srcRect[0].y - 1;		blurRect = blurRect2;		//top edge repeat	blurRect[0] = blurRect2[0];	blurRect[1] = blurRect2[1];	blurRect[2] =  tallRect[1];	blurRect[3] =  tallRect[0];		blitrect(src1, srcRect, blurBuffer, blurRect);		// edge repeat right	srcRect = srcRect2;		// right line	srcRect[0].x = srcRect[1].x - 1;	srcRect[3].x = srcRect[2].x - 1;		blurRect = blurRect2;		//right edge repeat	blurRect[0] = blurRect2[1];	blurRect[1] = longRect[1];	blurRect[2] =  longRect[2];	blurRect[3] =  blurRect2[2];		blitRect(src1, srcRect, blurBuffer, blurRect);		// edge repeat left	srcRect = srcRect2;		// left line	srcRect[1].x = srcRect[0].x - 1;	srcRect[2].x = srcRect[3].x - 1;		blurRect = blurRect2;		//left edge repeat	blurRect[0] = blurRect2[0];	blurRect[1] = longRect[0];	blurRect[2] =  longRect[3];	blurRect[3] =  blurRect2[3];		blitRect(src1, srcRect, blurBuffer, blurRect);end ifif distance >0;	Blur(blurBuffer, blurBuffer2, 0.0001, aspectOf(dest) * 0.0001/(distance * zoomfactor));	//subpixel values keep blur sharp, changing aspect keeps it fastelse;	blurBuffer2 = blurBuffer;end if;blitRect(blurBuffer2, blurRect2, dest, srcRect2)// FramePoly(blurRect, dest, kgreen, 4)	// to test the blit error, uncomment this lineif target == 1;	//YUV	if GetPixelFormat(dest) != kFormatYUV219;		ConvertImage(dest, dest, kFormatYUV219);		ConvertImage(src1, xbuffer, kFormatYUV219);	else		xbuffer = src1;	end ifelse if target == 2;	//RGB	if GetPixelFormat(dest) != kFormatRGB219;		ConvertImage(dest, dest, kFormatRGB219);		ConvertImage(src1, xbuffer, kFormatRGB219);	else		xbuffer = src1;	end ifend if;rY = (rY == 1) ? knone : kRed;gU = (gU == 1) ? knone : kGreen;bV = (bV == 1) ? knone : kBlue;aA = (aA == 1) ? knone : kalphaChannelCopy(xbuffer, dest, aA, rY, gU, bV);if GetPixelFormat(dest) != colorSpace;	//using colorspace makes this change back to whatever it started as	ConvertImage(dest, dest, colorSpace);end if