//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.orgfilter "Joe's Multi-Frame Blender";group "Joe's Video & Time Filters";input label0, "Frame Blending", label, "";input blender, "Blend Method", RadioGroup, 1, "Matte", "Screen", "Add";input pastframe, "Past Frames", slider, 2, 0, 10 snap 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;input futureframe, "Future Frames", slider, 2, 0, 10 snap 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;input atype, "PreMultiply", popup, 1, "Straight", "Black", "White";input masklights, "Mask Highlights", checkbox, 1;input label1, "Motion Differencing", label, "";input motiondiff, "Motion Difference", popup, 1, "None (off)", "3 Frame", "All Frames";input RGBorYUV, "Difference Using", popup, 1, "RGB", "Luma";input threshold, "Threshold", slider, 225, 128, 254;input blurradius, "Soften", slider, 2.5, 0, 10;input label2, "Mask Check", label, "";input showthis, "View", popup, 1, "Merged Output", "Motion Mask", "Colorize Motion";input maskcolor, "Mask Color", color, 255, 128, 0, 255;input maskopacity, "Color Opacity", slider, 60, 0, 100 label "%";input label3, "Fade With Original", label, "";input opacity, "Opacity", slider, 100, 0, 100;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";InformationFlag("YUVaware");fullframecodefloat w, h, clipdur, clipoffset, adjkey[256], i, j, colorspace;dimensionsOf(dest, w, h);image xbuffer[w][h], xbuffer2[w][h], diffbuffer[w][h];				//full size buffercolorspace = GetPixelFormat(dest);	getLimits(clip1, clipdur, clipoffset)if RGBorYUV == 1 //RGB	if GetPixelFormat(dest) != kFormatRGB255;		ConvertImage(src1, dest, kFormatRGB255);		setpixelformat(xbuffer, kFormatRGB255);		setpixelformat(xbuffer2, kFormatRGB255);		setpixelformat(diffbuffer, kFormatRGB255);	else		dest = src1;	end if;else // YUV	if GetPixelFormat(dest) != kFormatYUV219;		ConvertImage(src1, dest, kFormatYUV219);		setpixelformat(xbuffer, kFormatYUV219);		setpixelformat(xbuffer2, kFormatYUV219);		setpixelformat(diffbuffer, kFormatYUV219);	else		dest = src1;	end if;end if;if atype == 1	atype = kalpha;else if atype == 2	atype = kblack;else if atype == 3	atype = kwhite;end ifxbuffer2 = dest;if GetPixelFormat(diffbuffer) == kFormatYUV219;	channelfill(diffbuffer, 255, 0, 128, 128);else	channelfill(diffbuffer, 255, 0, 0, 0);end iffor i = -pastframe to futureframe	getVideo(clip1, -clipoffset + frame + i, xbuffer);		if (motiondiff == 2 && abs(i) == 1) || (motiondiff == 3)		if RGBorYUV == 1 //RGB			if GetPixelFormat(dest) != kFormatRGB255;				ConvertImage(src1, dest, kFormatRGB255);			else				dest = src1;			end if		else // YUV			if GetPixelFormat(dest) != kFormatYUV219;				ConvertImage(src1, dest, kFormatYUV219);			else				dest = src1;			end if		end if 				difference(dest, xbuffer, dest, kalpha);		Add(dest, diffbuffer, diffbuffer, 1, kalpha);	end if			if masklights // create alpha channel from bright pixels			if RGBorYUV == 1 //RGB			Desaturate(xbuffer, dest);			// average the values of the three channels 			channelcopy(dest, xbuffer, kred, knone, knone, knone);		else			channelcopy(xbuffer, xbuffer, kred, knone, knone, knone);		end if			invertchannel(xbuffer, xbuffer, 1, 0, 0, 0);	end if	if blender == 1		matte(xbuffer, xbuffer2, xbuffer2, 1/(pastframe + i + 1), atype);	else if blender == 2		screen(xbuffer2, xbuffer, xbuffer2, 1, atype);	else if blender == 3		add(xbuffer2, xbuffer, xbuffer2, 1, atype);	end ifnext;if (motiondiff > 1)	if RGBorYUV == 1 //RGB		Desaturate(diffbuffer, dest);			diffbuffer = dest;	end if		adjKey *= 0;	for j = (255-threshold) to 255;		adjKey[j] = 1;	next;		levelMap(diffbuffer, dest, LinearRamp, adjKey, LinearRamp, LinearRamp);			if (blurradius > 0)		BlurChannel(dest, diffbuffer, blurradius, 0, 1, 0, 0, 10);	else		diffbuffer = dest;	end ifend ifif (showthis == 1)	if (motiondiff > 1)			if RGBorYUV == 1 //RGB				if GetPixelFormat(dest) != kFormatRGB255;					ConvertImage(src1, dest, kFormatRGB255);				else					dest = src1;				end if				if GetPixelFormat(diffbuffer) != kFormatRGB255;					ConvertImage(diffbuffer, diffbuffer, kFormatRGB255);				end if			else // YUV				if GetPixelFormat(dest) != kFormatYUV219;					ConvertImage(src1, dest, kFormatYUV219);				else					dest = src1;				end if				if GetPixelFormat(diffbuffer) != kFormatYUV219;					ConvertImage(diffbuffer, diffbuffer, kFormatYUV219);				end if			end if 		channelcopy(diffbuffer, dest, kred, knone, knone, knone);		matte(dest, xbuffer2, dest, 1, kalpha);	else		dest = xbuffer2;	end ifelse if (showthis == 2)	channelcopy(diffbuffer, diffbuffer, kred, knone, knone, knone);	if GetPixelFormat(dest) != kFormatYUV219;		channelfill(dest, 255, 0, 0, 0);	else		channelfill(dest, 255, 0, 128, 128);	end if	if GetPixelFormat(diffbuffer) != kFormatYUV219;		channelfill(diffbuffer, -1, 255, 255, 255);	else		channelfill(diffbuffer, -1, 255, 128, 128);	end if	matte(diffbuffer, dest, dest, 1, kalpha);else if (showthis == 3)	if (motiondiff > 1)		channelcopy(diffbuffer, diffbuffer, kred, knone, knone, knone);		channelmultiply(diffbuffer, xbuffer, maskopacity/100, 0, 0, 0);		if GetPixelFormat(xbuffer) == kFormatYUV219;			channelfill(xbuffer, -1, maskcolor.r * 0.299 + maskcolor.g * 0.587 + maskcolor.b * 0.114, maskcolor.r * -0.169 + maskcolor.g * -0.332 + maskcolor.b * 0.500 + 128, maskcolor.r * 0.500 + maskcolor.g * -0.419 + maskcolor.b * -0.0813 + 128);		else			channelfill(xbuffer, -1, maskcolor.r, maskcolor.g , maskcolor.b);		end if				channelfill(dest, 255, -1, -1, -1)		matte(xbuffer, xbuffer2, dest, 1, kalpha);	else		if GetPixelFormat(dest) == kFormatYUV219;			channelfill(dest, 255, maskcolor.r * 0.299 + maskcolor.g * 0.587 + maskcolor.b * 0.114, maskcolor.r * -0.169 + maskcolor.g * -0.332 + maskcolor.b * 0.500 + 128, maskcolor.r * 0.500 + maskcolor.g * -0.419 + maskcolor.b * -0.0813 + 128);		else			channelfill(dest, 255, maskcolor.r, maskcolor.g , maskcolor.b);		end if	end ifend ifif colorspace != GetPixelFormat(dest)	ConvertImage(dest, dest, colorspace);end ifif opacity < 100	matte(dest, src1, dest, opacity/100, kalpha);end if