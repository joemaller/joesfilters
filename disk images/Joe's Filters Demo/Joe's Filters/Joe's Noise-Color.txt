//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.orgfilter "Joe's Color Noise";group "Joe's Noise Filters";input NoiseAmount, "Amount", slider, 30, 0.1, 400 ramp 80;input ScatterDance, "Fixed Noise", checkbox, 0input noiseScale, "Scale Noise", slider, 200, 100, 1000 label "%";input softnoise, "Blur Noise", slider, 0, 0, 10 ramp 80; input note1, "Color Mix:", Label,"";input monochrome, "Monochrome", checkbox, 0;input r, "Red/Gray", Slider, 255, 0, 255;input g, "Green", Slider, 255, 0, 255;input b, "Blue", Slider, 255, 0, 255;input ApplyAs, "Mode", Popup, 1, "Normal", "Multiply", "Screen", "Overlay", "Lighten", "Darken", "Add", "Subtract", "Difference";input Opacity, "Opacity", slider, 100, 0, 100;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";RenderEachFrameWhenStillcodefloat w, h, amin, amax;point noiseRect[4], noiseRect2[4]; dimensionsOf(Dest, w, h);float zoomfactor; zoomfactor = w/720;image xbuffer[w][h];image scalebuffer[w * 100/noiseScale * 1/zoomfactor][h * 100/noiseScale * 1/zoomfactor * aspectof(dest)];amin = noiseamount < 100 ? noiseamount/100 * 255 : 255;amax = noiseamount > 100 ? (noiseamount-100)/300 * 255 : 0;boundsof(dest, noiseRect);boundsof(scalebuffer, noiseRect2);randomseed(ScatterDance);RandomNoise(scalebuffer, amin, amax, 0, r, 0, g, 0, b, 1);	if (softnoise > 0);	dimensionsOf(scalebuffer, w, h);	image scalebuffer2[w][h];					scalebuffer2 = scalebuffer;	Blur(scalebuffer2, scalebuffer, softnoise * zoomfactor, aspectof(dest));end if;BlitRect(scalebuffer, noiseRect2 , xbuffer, noiseRect);if monochrome == 1;	Channelcopy(xbuffer, xbuffer, kalpha, kred, kred, kred);end if;if ApplyAs == 1; Matte(xbuffer, src1, dest, opacity/100, kalpha); end ifif ApplyAs == 2; Multiply(src1, xbuffer, dest, opacity/100, kalpha); end ifif ApplyAs == 3; Screen(src1, xbuffer, dest, opacity/100, kalpha); end ifif ApplyAs == 4; Overlay(src1, xbuffer, dest, opacity/100, kalpha); end ifif ApplyAs == 5; Lighten(src1, xbuffer, dest, opacity/100, kalpha); end ifif ApplyAs == 6; Darken(src1, xbuffer, dest, opacity/100, kalpha); end ifif ApplyAs == 7; add(src1, xbuffer, dest, opacity/100, kalpha); end if;if ApplyAs == 8; 		subtract(src1, xbuffer, dest, opacity/100, kalpha);		ChannelCopy(src1, dest, kalpha, knone, knone, knone);  end if;if ApplyAs == 9; 		Difference(src1, xbuffer, dest, kalpha); 		ChannelCopy(src1, dest, kalpha, knone, knone, knone); 		Matte(dest, src1,  dest, opacity/100, knone); end if;