//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.orgfilter "Joe's Levels Noise";group "Joe's Noise Filters";input Black, "Input Black", slider, 0, 0,  255;input gamma, "Gamma", slider, 1.3, 0.10, 5 ramp 85 detent 1;input White, "Input White", slider, 255, 0, 255;input outputBlack, "Output Black", slider, 0, 0, 255;input outputWhite, "Output White", slider, 255, 0, 255;input target, "Target", radiogroup, 2, "RGB Noise", "Luma Noise";input noiseScale, "Scale Noise", slider, 200, 100, 1000 label "%";input softnoise, "Soft Noise", slider, 0, 0, 10 ramp 80; input ScatterDance, "Fixed Noise", checkbox, 0;input Opacity, "Opacity", slider, 100, 0, 100;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";InformationFlag("YUVaware")RenderEachFrameWhenStillcodefloat w, h, i, adjKey[256], range, colorSpace;point noiseRect[4], noiseRect2[4]; dimensionsOf(Dest, w, h);float zoomfactor; zoomfactor = w/720;image xbuffer[w][h];image scalebuffer[w * 100/noiseScale * 1/zoomfactor][h * 100/noiseScale * aspectof(dest) * 1/zoomfactor];boundsof(dest, noiseRect);boundsof(scalebuffer, noiseRect2);randomseed(ScatterDance);RandomNoise(scalebuffer, 0, 255, 0, 255, 0, 255, 0, 255, 0);	Range = (White > Black) ? White - Black : 1;for i = 0 to 255	adjKey[i] = (i < White) ? power((i-Black)/range, Gamma): 1; next;outputBlack = (outputWhite-outputBlack > 0) ? outputBlack : outputWhite-1;	//corrects for impossible reversal of output valuesadjKey *= outputWhite-outputBlack;	adjKey += outputBlack;	adjKey /= 255;if target == 1;	//RGB	if GetPixelFormat(dest) != kFormatRGB219;		colorSpace = GetPixelFormat(dest);			//store this for later				setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219);				levelMap(xbuffer, dest, LinearRamp, adjKey, adjKey, adjKey);						ConvertImage(dest, xbuffer, colorSpace);		setpixelformat(dest, colorSpace)		dest = xbuffer;			else		xbuffer = src1				levelMap(xbuffer, dest, LinearRamp, adjKey, adjKey, adjKey);	end if		else if target == 2;	// Luma	if GetPixelFormat(dest) != kFormatYUV219;		colorSpace = GetPixelFormat(dest);			//store this for later				setpixelformat(dest, kFormatYUV219);		setpixelformat(xbuffer, kFormatYUV219)		ConvertImage(src1, xbuffer, kFormatYUV219);					levelMap(xbuffer, dest, LinearRamp, adjKey, LinearRamp, LinearRamp);		ConvertImage(dest, xbuffer, colorSpace);		setpixelformat(dest, colorSpace)		dest = xbuffer;			else		xbuffer = src1			levelMap(xbuffer, dest, LinearRamp, adjKey, LinearRamp, LinearRamp);	end ifend ifif (softnoise > 0);	dimensionsOf(scalebuffer, w, h);	image scalebuffer2[w][h];					scalebuffer2 = scalebuffer;	BlurChannel(scalebuffer2, scalebuffer, softnoise * zoomfactor, 1, 0, 0, 0, aspectof(dest));end if;BlitRect(scalebuffer, noiseRect2 , xbuffer, noiseRect);Channelcopy(xbuffer, dest, kalpha, knone, knone, knone);Matte(dest, src1, dest, opacity/100, kalpha);