//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.orgfilter "Joe's Sampled Color Levels";group "Joe's Adjustments";input White, "White Point", color, 255, 255, 255, 255;input DoWhite, "Value Average", Checkbox, 0;input Gamma, "Gray Point", color, 255, 128, 128, 128;input DoGamma, "Color & Value", Checkbox, 0;input Black, "Black Point", color, 255, 0, 0, 0;input DoBlack, "Value Average", Checkbox, 0;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";codefloat i;float rGamma, gGamma, bGamma, xGamma;float rWhite, gWhite, bWhite;float rBlack, gBlack, bBlack;float rRange, gRange, bRange;float rKey[256], gKey[256], bKey[256];Gamma.r = (Gamma.r == 255) ? 254 : Gamma.rGamma.g = (Gamma.g == 255) ? 254 : Gamma.gGamma.b = (Gamma.b == 255) ? 254 : Gamma.bGamma.r = (Gamma.r == 0) ? 1 : Gamma.rGamma.g = (Gamma.g == 0) ? 1 : Gamma.gGamma.b = (Gamma.b == 0) ? 1 : Gamma.bif DoGamma == 1; 	xGamma = log10(128/255);else if DoGamma == 0;	xGamma = log10(((Gamma.r + Gamma.g + Gamma.b)/3)/255);end if;rGamma = xGamma / log10(Gamma.r/255);gGamma = xGamma / log10(Gamma.g/255);bGamma = xGamma / log10(Gamma.b/255);if DoWhite == 1;	White.r = (White.r + White.g + White.b)/3; White.g = White.r; White.b = White.r;end ifif DoBlack == 1;	Black.r = (Black.r + Black.g + Black.b)/3; Black.g = Black.r; Black.b = Black.r;end ifrRange = (White.r > Black.r) ? White.r - Black.r : 1;gRange = (White.g > Black.g) ? White.g - Black.g : 1;bRange = (White.b > Black.b) ? White.b - Black.b : 1;for i = 0 to 255	rKey[i] = (i < White.r) ? power((i-Black.r)/rRange, rGamma): 1; 	gKey[i] = (i < White.g) ? power((i-Black.g)/gRange, gGamma): 1;	bKey[i] = (i < White.b) ? power((i-Black.b)/bRange, bGamma): 1;		// any negative values seem to be interpreted as zero so these are unnecessary	//rKey[i] = (rKey[i] >= 0) ? rKey[i] : 0;	//gKey[i] = (gKey[i] >= 0) ? gKey[i] : 0;	//bKey[i] = (bKey[i] >= 0) ? bKey[i] : 0;next;levelMap(src1, dest, LinearRamp, rKey, gKey, bKey);