//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.orgfilter "Joe's Levels";group "Joe's Adjustments";input ApplyTo, "Apply To:", popup, 1, "RGB (full color)", "Luma (preserve colors)", "Red Only", "Green Only", "Blue Only", "Cyan (Green & Blue)", "Magenta (Red & Blue)", "Yellow (Red & Green)", "Chroma (CbCr)", "Cb (Blue to Yellow)", "Cr (Red to Green)", "Alpha Only";input inputlabel, "Input Levels:", Label,"";input inputBlack, "Input Black", slider, 0, 0, 253;input gamma, "Gamma", slider, 1, 0.10, 5 ramp 85 detent 1;input inputWhite, "Input White", slider, 255, 2, 255;input outputlabel, "Output Levels:", Label,"";input outputBlack, "Output Black", slider, 0, 0, 255;input outputWhite, "Output White", slider, 255, 0, 255;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";InformationFlag("YUVaware")ProducesAlpha;codeexposedbackground = 1;float i, j, w, h, clut[256];dimensionsOf(Dest, w, h);image xbuffer[w][h];for i = inputWhite to 255						//sets all pixels from inputwhite to 255 to maximum value	clut[i] = 1next;j = (inputWhite > inputBlack) ?	inputWhite - inputBlack: 1;  //sets the divisor for the next step, this will be the number of values between black and whitefor i = inputBlack to inputWhite				//sets the ramp of pixels from black to white to a gamma adjusted curve of values	clut[i] = power((i-inputBlack)/j, gamma);next;outputBlack = (outputWhite-outputBlack > 0) ? outputBlack : outputWhite-1;	//corrects for impossible reversal of output valuesclut *= outputWhite-outputBlack;				//multiplies everything by the difference of output white and black, because the clut is fractional values, all values will decrease in the step after nextclut += outputBlack;							//increases the clut by the output black, sets the bottommost levelclut /= 255;									//corrects the total clut to make sure all 255 values fall between 0 and 1	if ApplyTo == 1;								//RGB	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219)	else		xbuffer = src1	end if	levelMap(xbuffer, dest, LinearRamp, clut, clut, clut);end if;if ApplyTo == 2;								// Luma	if GetPixelFormat(dest) != kFormatYUV219;		setpixelformat(dest, kFormatYUV219)		setpixelformat(xbuffer, kFormatYUV219)		ConvertImage(src1, xbuffer, kFormatYUV219)	else		xbuffer = src1	end if			levelMap(xbuffer, dest, LinearRamp, clut, LinearRamp, LinearRamp);end ifif ApplyTo == 3;								//Red Only	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219)	else		xbuffer = src1	end if	levelMap(xbuffer, dest, LinearRamp, clut, LinearRamp, LinearRamp);end if;if ApplyTo == 4;	//Green Only	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219)	else		xbuffer = src1	end if	levelMap(xbuffer, dest, LinearRamp, LinearRamp, clut, LinearRamp);end if;if ApplyTo == 5;	//Blue Only	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219)	else		xbuffer = src1	end if	levelMap(xbuffer, dest, LinearRamp, LinearRamp, LinearRamp, clut);end if;if ApplyTo == 6;	//Cyan Only	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219)	else		xbuffer = src1	end if	levelMap(xbuffer, dest, LinearRamp, LinearRamp, clut, clut);end if;if ApplyTo == 7;	//Magenta Only	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219)	else		xbuffer = src1	end if	levelMap(xbuffer, dest, LinearRamp, clut, LinearRamp, clut);end if;if ApplyTo == 8;	//Yellow Only	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219)		setpixelformat(xbuffer, kFormatRGB219)		ConvertImage(src1, xbuffer, kFormatRGB219)	else		xbuffer = src1	end if	levelMap(xbuffer, dest, LinearRamp, clut, clut, LinearRamp);end if;if ApplyTo == 9;	//Chroma Only	if GetPixelFormat(dest) != kFormatYUV219;		setpixelformat(dest, kFormatYUV219)		setpixelformat(xbuffer, kFormatYUV219)		ConvertImage(src1, xbuffer, kFormatYUV219)	else		xbuffer = src1	end if			levelMap(xbuffer, dest, LinearRamp, LinearRamp, clut, clut);end if;if ApplyTo == 10;	//Cb Only	if GetPixelFormat(dest) != kFormatYUV219;		setpixelformat(dest, kFormatYUV219)		setpixelformat(xbuffer, kFormatYUV219)		ConvertImage(src1, xbuffer, kFormatYUV219)	else		xbuffer = src1	end if			levelMap(xbuffer, dest, LinearRamp, LinearRamp, clut, LinearRamp);end if;if ApplyTo == 11;	//Cr Only	if GetPixelFormat(dest) != kFormatYUV219;		setpixelformat(dest, kFormatYUV219)		setpixelformat(xbuffer, kFormatYUV219)		ConvertImage(src1, xbuffer, kFormatYUV219)	else		xbuffer = src1	end if			levelMap(xbuffer, dest, LinearRamp, LinearRamp, LinearRamp, clut);end if;if ApplyTo == 12;	//Alpha Only	if GetPixelFormat(dest) != kFormatRGB219;		setpixelformat(dest, kFormatRGB219);		setpixelformat(xbuffer, kFormatRGB219);		ConvertImage(src1, xbuffer, kFormatRGB219);	else;		xbuffer = src1	end if;	levelMap(xbuffer, dest, clut, LinearRamp, LinearRamp, LinearRamp);end if;if GetPixelFormat(dest) != kFormatYUV219;	xbuffer = dest;	setpixelformat(dest, kFormatYUV219);	ConvertImage(xbuffer, dest, kFormatYUV219);end if