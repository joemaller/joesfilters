//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //   for Final Cut Pro // (C) 2002 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.orgfilter "Joe's Saturation Noise";group "Joe's Noise Filters";input RGBtarget, "Source:", RadioGroup, 1, "Gray (Average)", "Gray (Luma)", "Red Channel","Green Channel","Blue Channel";input desat, "Saturation", Slider, 200, 0, 1000 ramp 90 label "%"input noiseScale, "Scale Noise", slider, 200, 100, 1000 label "%";input softnoise, "Soft Noise", slider, 0, 0, 10 ramp 80; input ScatterDance, "Fixed Noise", checkbox, 0;input Opacity, "Opacity", slider, 100, 0, 100;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";RenderEachFrameWhenStillcodefloat w, h, i, rTGT, gTGT, bTGT, rr, rg, rb, gr, gg, gb, br, bg, bb, offset0[3], mat[3][3];point noiseRect[4], noiseRect2[4]; dimensionsOf(Dest, w, h);float zoomfactor; zoomfactor = w/720;image xbuffer[w][h];image scalebuffer[w * 100/noiseScale * 1/zoomfactor][h * 100/noiseScale * aspectof(dest) * 1/zoomfactor];boundsof(dest, noiseRect);boundsof(scalebuffer, noiseRect2);randomseed(ScatterDance);RandomNoise(scalebuffer, 0, 255, 0, 255, 0, 255, 0, 255, 0);	rr = 1; rg = 0; rb = 0gr = 0; gg = 1; gb = 0br = 0; bg = 0; bb = 1desat = 1 - desat/100; 		//makes the desaturate value a decimal value between 0 and 1if RGBtarget == 1; rTGT = 1/3; gTGT = 1/3; bTGT = 1/3; end if				// gray if RGBtarget == 2; rTGT = 0.3086; gTGT = 0.6094; bTGT = 0.0820; end if		// luma if RGBtarget == 3; rTGT = 1; gTGT = 0; bTGT = 0; end if						// red if RGBtarget == 4; rTGT = 0; gTGT = 1; bTGT = 0; end if						// green if RGBtarget == 5; rTGT = 0; gTGT = 0; bTGT = 1; end if						// blue rr -= (rr - rTGT) * desat;rg -= (rg - rTGT) * desat;rb -= (rb - rTGT) * desat;gr -= (gr - gTGT) * desat;gg -= (gg - gTGT) * desat;gb -= (gb - gTGT) * desat;br -= (br - bTGT) * desat;bg -= (bg - bTGT) * desat;bb -= (bb - bTGT) * desat;mat = {rr, rg, rb, gr, gg, gb, br, bg, bb}colorTransform(Src1, Dest, mat, offset0, offset0);if (softnoise > 0);	dimensionsOf(scalebuffer, w, h);	image scalebuffer2[w][h];					scalebuffer2 = scalebuffer;	BlurChannel(scalebuffer2, scalebuffer, softnoise * zoomfactor, 1, 0, 0, 0, aspectof(dest));end if;BlitRect(scalebuffer, noiseRect2 , xbuffer, noiseRect);Channelcopy(xbuffer, dest, kalpha, knone, knone, knone);Matte(dest, src1, dest, opacity/100, kalpha);