transition "Joe's Film Dissolve"
group "BETA"

input fade1, "Fast Fade Source 1", checkbox, 0;
//input doGamma, "do Gamma", checkbox, 0;
 input newCenter, "Centering", slider, 50, 0, 100;
// input easing, "Easing", slider, 50, -100, 100;
// input easeMethod, "Easing Method", popup, 2,  "Ease In", "Ease Out", "S-Curve", "None";

InformationFlag("YUVaware");
code

// INCLUDE "ArrayFloatCount.fxscript" v1.2

on isIndexFloatArray(value _i, float _ar);return(_ar[_i][0] != kundefined); end 	//  checks for the existance of a zeroth index of the passed index
on isIndexFloat(value _i, float _ar);return(_ar[_i] != kundefined); end 
on ArrayFloatIndexExists(value _i, float _ar);return(isIndexFloatArray(_i, _ar) || isIndexFloat(_i, _ar)); end 

on ArrayFloatCount(float _ar)
	float _l, _r, _seed, _step, _counter;
	_seed = 7; // somewhat arbitrary, chosen after a lot of performance testing
	_step = _seed;
	
	_l = 1 // set this to save a loop checking the zeroth index
	_r = _l + _seed;

	repeat while true
		_counter++;

		if (ArrayFloatIndexExists(_l, _ar) && ArrayFloatIndexExists(_r, _ar))	// both values in array
			_l = _r+1;	// start at _r+1 to prevent double-checking values
			_r = _l + _step;
			_step += _seed * _counter;

		else if (!ArrayFloatIndexExists(_l, _ar) && !ArrayFloatIndexExists(_r, _ar))	// no values in array
				return _l;	// stepped one over _r previously, last index must be _l-1, return _l to compenstate for count vs. index off-by-one

		else 	// bottom value in array, top not. Half top and step bottom
			_step = _r; // temporary storage of the _r variable
			_l = _l+1; // increment _l to prevent double-checking values
			_r = _l + integer((_r - _l)/2);	// half the distance between _l and _r
			_step -= _r; // difference between old _r and new _r

		end if
	end repeat;
end 

// END "ArrayFloatCount.fxscript"




// INCLUDE "makeLevelMapBez.fxscript" v1.2

on makeLevelMapBez(float _lmap, value _inBlack, value _gamma, value _inWhite, value _outBlack, value _outWhite)
		// requires ArrayFloatCount.fxscript
		
		// uses BezToLevelMap to generate an adjustment level map for image correction.
		// results have been calibrated against the slower makeLevelMapFN
		// inputs are the adjustment array and five standard levels adjustment settings

		//note (11-14-04): output white seems over-sensitive? blowing out around output-white 220
		

	float _j, _D1, _D2, _mapLength;
	point _Lpt, _Rpt, _Cpt1, _Cpt2;

	// enforce limits
	_gamma = (_gamma > 10) ? 10:_gamma;
	_gamma = (_gamma < 0.1) ? 0.1:_gamma;
	_gamma = (_gamma < 1) ? 1- (1-_gamma) * 0.9 : _gamma;

	
	_mapLength = ArrayFloatCount(_lmap)-1;
	_gamma = 1/_gamma; // invert value to match Photoshop's values
	_outBlack = (_outWhite-_outBlack > 0) ? _outBlack : _outWhite-1;	// corrects for  reversal of inWhite and inBlack

	_Lpt = {_inBlack/_mapLength, _outBlack/_mapLength};
	_Rpt = {_inWhite/_mapLength, _outWhite/_mapLength};
	
	if (_gamma > 1)
		_j = power(_gamma/10, exp(1))
		_D1 = 1 - 1/_gamma - _j/10;
		_D2 = _j;
		_Cpt1.x = sin(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.x; 
		_Cpt1.y = cos(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.y;
	
		Interpolate(_Lpt, _Cpt1, (_inWhite-_inBlack)/255, _Cpt1)	// correct for input scaling (horizontal)
	
	else // gammma <= 1
		
		_j = power(1.825, -_gamma) - 0.445;	// I don't know why these numbers work, they were discovered after extensive testing and charting	
		_D1 = power(4,-_gamma) + _j/10 ;
		_D2 = 1-_gamma - _j
		
		_Cpt1.x = sin(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.x;
		_Cpt1.y = cos(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.y;
		
		Interpolate(_Lpt, _Cpt1, (_outWhite - _outBlack)/_mapLength, _Cpt1)		// correct for output scaling (vertical)

	end if
		
	Interpolate(_Cpt1, _Rpt, 1-_D2, _Cpt2)	// possibly save the subtraction by reversing the points...
	
	BezToLevelMap(_lmap, _Lpt, _Cpt1, _Cpt2, _Rpt, 0, _mapLength, TRUE);
	
	if (_inBlack > 0)
		_Cpt1 = {0, _Lpt.y};
		BezToLevelMap(_lmap, _Cpt1, _Cpt1, _Lpt, _Lpt, 0, _inBlack, TRUE);
	end if
	if (_inWhite < _mapLength)
		_Cpt1 = {1, _Rpt.y};
		BezToLevelMap(_lmap, _Rpt, _Rpt, _Cpt1, _Cpt1, _inWhite, _mapLength, TRUE);
	end if

end


// END "makeLevelMapBez.fxscript"


// INCLUDE "ease.fxscript" v1.3


on ease(value _r, value _easing, value _method)
	
	// a single placeholder easing tool for easier use, 
	
	// required inputs:
	// input easing, "Easing", slider, 0, -100, 100;
	// input easeMethod, "Easing Method", popup, 3,  "Ease In", "Ease Out", "S-Curve";
	// optional easeMethod value:  4 = none

	if (_method == 1)
		return easeIn(_r, _easing);
	else if (_method == 2)
		return easeOut(_r, _easing);
	else if (_method == 3)
		return easeS(_r, _easing);
	else if (_method == 4)
		return _r;
	end if
end


on easeIn(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
	
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return power(_r, _easing);

end

on easeOut(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return 1 - power(1 - _r, _easing);
end


on easeS(value _r, value _easing)
	// modifies a 0-1 value towards an S-curve
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	if (_r < 0.5)
		return (power(2 * _r, _easing)/2);	// half simple gamma curve (first half S)
	else			
		return ((-power(-2 * _r + 2, _easing))/2 + 1);  // half inverted gamma curve (second half S)	
	end if
end  

// END "ease.fxscript"

on betterBlend(image _src1, image _src2, image _dest, value _ratio, value _center)
	// _ratio is 0-1, matching the constant Ratio
	// center is used for the easing values, it's translated from 0-100 to -100 to 100
	_center *= 2;
	_center -= 100;
	
	float _w, _h, _ykey1[256], _ckey1[256], _ykey2[256], _ckey2[256], _colorSpace, _easeMethod, _outRatio;
	dimensionsOf(_dest, _w, _h);
	image _temp1[_w][_h], _temp2[_w][_h];
	_easeMethod = 1;

	_colorSpace = getPixelFormat(_dest);
	if (_colorSpace != kFormatYUV219)
		ConvertImage(_src1, _temp1, kFormatYUV219);
		ConvertImage(_src2, _temp2, kFormatYUV219);
		ConvertImage(_dest, _dest, kFormatYUV219);
	else
		_temp1 = _src1;
		_temp2 = _src2;
	end if
	
	_outRatio = (1 - _ratio) * 2;
	_outRatio = (_outRatio > 1) ? 1 : _outRatio;

	makeLevelMapBez(_ykey1, 0, ease(_outRatio*_outRatio, _center, _easeMethod), 255, 0, _outRatio * 255);
	makeLevelMapBez(_ckey1, 0, 1, 255, ease(1-_outRatio, _center, 4) * 127.5, 255 - ease(1-_outRatio, _center, 4) * 127.5);

	makeLevelMapBez(_ykey2, 0, ease(_ratio*_ratio, _center, _easeMethod), 255, 0, _ratio * 255);
	makeLevelMapBez(_ckey2, 0, 1, 255, ease(1-_ratio, _center, 4) * 127.5, 255 - ease(1-_ratio, _center, 4) * 127.5);

	
if(fade1)
	levelMap(_temp1, _temp1, linearRamp, _ykey1, _ckey1, _ckey1);	// enable this to fade out _src1
end if
levelMap(_temp2, _temp2, linearRamp, _ykey2, _ckey2, _ckey2);
screen(_temp2, _temp1, _dest, 1-_ratio, kalpha);
	
	if (getPixelFormat(_src1) != _colorSpace)	// return the same color space as we started with
		ConvertImage(_dest, _dest, _colorSpace);
	end if

end




float w,h, ykey[256], ckey[256];
dimensionsOf(dest, w, h);
image temp[w][h];


betterBlend(src1, src2, dest, ratio, newCenter)


if (false)	// enable to check fade vs standard cross-dissolve

	matte(src2, src1, temp, ratio, kalpha)
	point box[4]
	makeRect(box, 0, 0, 100, 100);

	blitRect(temp, box, dest, box);
end if