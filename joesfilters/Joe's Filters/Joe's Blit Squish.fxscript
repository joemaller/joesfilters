transition "Joe's BlitSquish";
group "Joe's Transitions [BETA]";

// hopefully another particle effect for the transition engine.
// one possible means is to rotate out with a  very high overhead Z index, causing each tile to 
// spin off the frame.


input label0, "General Settings", label, "";

input dotsX, "Horizontal", slider, 4, 1, 50 ramp 60;
input dotsY, "Vertical", slider, 3, 1, 50 ramp 60;
input dir, "Direction", angle, 30, -360, 360;
input delay, "Time Overlap", slider, 0.667, 0, 1;
input easeMethod, "Easing Method", popup, 3,  "Ease In", "Ease Out", "S-Curve";
input easing, "Easing ", slider, 0, -100, 100;


input label1, "Transition Settings", label, "";
input squish, "Squish", radiogroup, 3, "Horizontal", "Vertical", "Both";

input jfcopyright, "©ÊJoe's Filters", Label,"";
input jfurl, "www.joesfilters.com", Label,"";

InformationFlag("YUVaware");
producesAlpha

code

exposedBackground=1;
//channelfill(dest, 0, 0, 127,127);






// INCLUDE "absNoInt.fxscript"  vNew

on absNoInt(value _num)	// returns the absolute floating point value of a number
	return _num * sign(_num);
end

// END "absNoInt.fxscript"
 




// INCLUDE "mirrorRect.fxscript"  v1.1

on mirrorRect(point _srcRect, value _flipX, value _flipY)
	// mirror a rectangular area
	// _flipX and _flipY are booleans
	
	float _j;
	point _rotatetemp[4];
	
	_rotatetemp = _srcRect;
	
	if (_flipX && !_flipY) // flipX
		for _j = 0 to 3
			_srcRect[_j] = _rotatetemp[_j^1];
		next;
	else if (_flipY && !_flipX) // flip vertical
		for _j = 0 to 3
			_srcRect[_j] = _rotatetemp[3-_j];
		next;
	else if (_flipX && _flipY) // flip both
		for _j = 0 to 3
			_srcRect[_j] = _rotatetemp[(_j + 2) % 4];
		next;
	end if
end

// END "mirrorRect.fxscript"
 

// INCLUDE "basic math.fxscript"  v1.1

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 

// END "basic math.fxscript"
 
 

 


// INCLUDE "ease.fxscript"  v1.2


on ease(value _r, value _easing, value _method)
	
	// a single placeholder easing tool for easier use, 
	
	// required inputs:
	// input easing, "Easing", slider, 0, -100, 100;
	// input easeMethod, "Easing Method", popup, 3,  "Ease In", "Ease Out", "S-Curve";

	if (_method == 1)
		return easeIn(_r, _easing)
	else if (_method == 2)
		return easeOut(_r, _easing)
	else if (_method == 3)
		return easeS(_r, _easing)
	end if
end


on easeIn(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
	
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return power(_r, _easing);

end

on easeOut(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return 1 - power(1 - _r, _easing);
end


on easeS(value _r, value _easing)
	// modifies a 0-1 value towards an S-curve
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	if (_r < 0.5)
		return (power(2 * _r, _easing)/2);	// half simple gamma curve (first half S)
	else			
		return ((-power(-2 * _r + 2, _easing))/2 + 1);  // half inverted gamma curve (second half S)	
	end if
end  

// END "ease.fxscript"
 
 



// INCLUDE "easeMiddle.fxscript"  v1.3

on easeMiddle(value _r, value _easing, value _method)

	if (_r < 0 || _r > 1)
		return _r;
	end if
	
	if (_method == 1) // easeIn
		if (_r < 0.5)
			return easeIn(_r * 2, _easing)
		else
			return easeIn((1 - _r) * 2, _easing)
		end if
	else if (_method == 2) // easeOut
		if (_r < 0.5)
			return easeOut(_r * 2, _easing)
		else
			return easeOut((1 - _r) * 2, _easing)
		end if
	else if (_method == 3) // easeS
		if (_r < 0.5)
			return easeS(_r * 2, _easing)
		else
			return easeS((1 - _r) * 2, _easing)
		end if
	end if
end

// END "easeMiddle.fxscript"
 

// INCLUDE "NumReporter.fxscript"  v1.1

on NumReporter(image _destIMG, value _data, string _label, value _numberformat, value _h, value _fontsize, value _tracking)
	
	float rw, rh, ra, rd, rzoom;
	string reporter;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(kcenterjustify);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data, reporter, _numberformat);
	reporter = _label + " = " + reporter;
	DrawString(reporter, 0, _h, _tracking,  _destIMG, fontcolor, aspectof(_destIMG));

end 

// END "NumReporter.fxscript"
 
// INCLUDE "PtReporter.fxscript"  v1.1

on PtReporter(image _destIMG, point _data, string _label, value _numberformat, value _h, value _fontsize, value _tracking)
	
	float rw, rh, ra, rd, rzoom;
	string reporterX, reporterY;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(kcenterjustify);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data.x, reporterX, _numberformat);
	NumToString(_data.y, reporterY, _numberformat);
	reporterX = _label + " = {" + reporterX + "," + reporterY + "}";
	DrawString(reporterX, 0, _h, _tracking,  _destIMG, fontcolor, aspectof(_destIMG));

end 

// END "PtReporter.fxscript"

 

// INCLUDE "pt3dReporter.fxscript"  v1.1

on Pt3dReporter(image _destIMG, point3d _data, string _label, value _numberformat, value _h, value _fontsize, value _tracking)
	
	float rw, rh, ra, rd, rzoom;
	string reporterX, reporterY, reporterZ;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(kcenterjustify);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data.x, reporterX, _numberformat);
	NumToString(_data.y, reporterY, _numberformat);
	NumToString(_data.z, reporterZ, _numberformat);
	reporterX = _label + " = {" + reporterX + "," + reporterY + "," + reporterZ + "}";
	DrawString(reporterX, 0, _h, _tracking,  _destIMG, fontcolor, aspectof(_destIMG));

end 

// END "pt3dReporter.fxscript"
 
 

// INCLUDE "ChannelView.fxscript"  v1.6

on ChannelView(image _src, image _dest, value _colorSpace, value _colors)

	// requires PlaceFrame.fxscript
	// _src, _dest : source and destination image buffers
	// _colors : boolean switch to show channels in color

	point _dims, _srcBox[4], _destBox[4];
	dimensionsOf(_dest, _dims.x, _dims.y);
	image _temp[_dims.x][_dims.y], _temp2[_dims.x][_dims.y];
	
	
	if (getPixelFormat(_src) != _colorSpace)
		ConvertImage(_src, _temp, _colorSpace);
		ConvertImage(_temp2, _temp2, _colorSpace);
		ConvertImage(_dest, _dest, _colorSpace);
	else
		_temp = _src;
	end if

	_colors ^= 1;
	boundsOf(_src, _srcBox)
	boundsOf(_dest, _destBox);

	_destBox *= 0.5;
	
	if (_colorSpace == kFormatYUV219)
		channelfill(_temp2, 255, 127, 127, 127);

		channelcopy(_temp, _temp2, knone, kalpha, knone, knone)
		PlaceFrame(_temp2, _dest, _destBox[0], _destBox[2].x * 2, _destBox[2].y * 2, 0, 4, 1)
	
		channelfill(_temp2, 255, 127, 127, 127);

		channelcopy(_temp, _temp2, knone, kred, knone, knone)
		PlaceFrame(_temp2, _dest, _destBox[1], _destBox[2].x * 2, _destBox[2].y * 2,  0, 4, 1)
	
		channelfill(_temp2, 255, 127, 127, 127);
		
		if (!_colors)
			channelcopy(_temp, _temp2, knone, knone, kgreen, knone);
		else
			channelcopy(_temp, _temp2, knone, kgreen, knone, knone);
		end if
		PlaceFrame(_temp2, _dest, _destBox[3], _destBox[2].x * 2, _destBox[2].y * 2,  0, 4, 1)
		
		channelfill(_temp2, 255, 127, 127, 127);

		if (!_colors)
			channelcopy(_temp, _temp2, knone, knone, knone, kblue);
		else
			channelcopy(_temp, _temp2, knone, kblue, knone, knone);
		end if
		PlaceFrame(_temp2, _dest, _destBox[2], _destBox[2].x * 2, _destBox[2].y * 2,  0, 4, 1)

	else
		channelfill(_temp2, 255, 0, 0, 0);
		channelcopy(_temp, _temp2, knone, kalpha, kalpha, kalpha)
		PlaceFrame(_temp2, _dest, _destBox[0], _destBox[2].x * 2, _destBox[2].y * 2, 0, 4, 1)
	
		channelcopy(_temp, _temp2, knone, kred, kred, kred)
		channelMultiply(_temp2, _temp2, 1, 1, _colors, _colors);
		PlaceFrame(_temp2, _dest, _destBox[1], _destBox[2].x * 2, _destBox[2].y * 2,  0, 4, 1)
		
		channelcopy(_temp, _temp2, knone, kgreen, kgreen, kgreen);
		channelMultiply(_temp2, _temp2, 1, _colors, 1, _colors);
		PlaceFrame(_temp2, _dest, _destBox[3], _destBox[2].x * 2, _destBox[2].y * 2,  0, 4, 1)
	
		channelcopy(_temp, _temp2, knone, kblue, kblue, kblue);
		channelMultiply(_temp2, _temp2, 1, _colors, _colors, 1);
		PlaceFrame(_temp2, _dest, _destBox[2], _destBox[2].x * 2, _destBox[2].y * 2,  0, 4, 1)

	end if
end 


// END "ChannelView.fxscript"
 
 
 



// INCLUDE "PlaceFrame.fxscript"  v1.1

on PlaceFrame(image _src, image _dest, point _originPt, value _frameWidth, value _frameHeight, value _angle, value _orientation, value _cropFrame)
		
		// _src : source image to copy from
		// _dest : destination image buffer
		// _originPt: point in destination buffer where the fframe will be drawn
		// _frameWidth: width of the output frame
		// _frameHeight: height of the output frame
		// _angle: rotation angle of rotated frame, around _originPt
		// _orientation:  0-3 = destination rectangle corners, 4 = center
		// _cropFrame:  < 1 decimal value, crops into image similar to action-safe area definition
	
	point _srcBox[4], _destBox[4], _rotateCenter;
	float _FieldOrder;

	_FieldOrder = (fieldNumber - 1 == topfield);	// do this in here for one less thing to worry about

	boundsOf(_src, _srcBox);
	
	if (_orientation == 0)	
		MakeRect(_destBox, _originPt.x,  _originPt.y, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[0];

	else if (_orientation == 1)
		MakeRect(_destBox, _originPt.x - _frameWidth,  _originPt.y, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[1];

	else if (_orientation == 2)
		MakeRect(_destBox, _originPt.x - _frameWidth,  _originPt.y - _frameHeight, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[2];

	else if (_orientation == 3)
		MakeRect(_destBox, _originPt.x,  _originPt.y- _frameHeight, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[3];
		
	else if (_orientation == 4)
		MakeRect(_destBox, _originPt.x - _frameWidth/2,  _originPt.y - _frameHeight/2, _frameWidth, _frameHeight);
		_rotateCenter = _originPt;
	end if
	
	Rotate(_destBox, _rotateCenter, _angle, aspectOf(_dest));
	
	_srcBox *= _cropFrame;			// crop into source frame
	
	_rotateCenter = {0, (fieldnumber-1)^_FieldOrder};	// reuse _rotateCenter for _srcBox field-shifting
	_srcBox += _rotateCenter;		// shift soucebox to compensate for field-based output
	blitRect(_src, _srcBox, _dest, _destBox);
	
end

// END "PlaceFrame.fxscript"
 
 


// INCLUDE "ArrayFloatCount.fxscript"  v1.2

on isIndexFloatArray(value _i, float _ar);return(_ar[_i][0] != kundefined); end 	//  checks for the existance of a zeroth index of the passed index
on isIndexFloat(value _i, float _ar);return(_ar[_i] != kundefined); end 
on ArrayFloatIndexExists(value _i, float _ar);return(isIndexFloatArray(_i, _ar) || isIndexFloat(_i, _ar)); end 

on ArrayFloatCount(float _ar)
	float _l, _r, _seed, _step, _counter;
	_seed = 7; // somewhat arbitrary, chosen after a lot of performance testing
	_step = _seed;
	
	_l = 1 // set this to save a loop checking the zeroth index
	_r = _l + _seed;

	repeat while true
		_counter++;

		if (ArrayFloatIndexExists(_l, _ar) && ArrayFloatIndexExists(_r, _ar))	// both values in array
			_l = _r+1;	// start at _r+1 to prevent double-checking values
			_r = _l + _step;
			_step += _seed * _counter;

		else if (!ArrayFloatIndexExists(_l, _ar) && !ArrayFloatIndexExists(_r, _ar))	// no values in array
				return _l;	// stepped one over _r previously, last index must be _l-1, return _l to compenstate for count vs. index off-by-one

		else 	// bottom value in array, top not. Half top and step bottom
			_step = _r; // temporary storage of the _r variable
			_l = _l+1; // increment _l to prevent double-checking values
			_r = _l + integer((_r - _l)/2);	// half the distance between _l and _r
			_step -= _r; // difference between old _r and new _r

		end if
	end repeat;
end 

// END "ArrayFloatCount.fxscript"
 




// INCLUDE "makeLevelMapBez.fxscript"  v1.2

on makeLevelMapBez(float _lmap, value _inBlack, value _gamma, value _inWhite, value _outBlack, value _outWhite)
		// requires ArrayFloatCount.fxscript
		
		// uses BezToLevelMap to generate an adjustment level map for image correction.
		// results have been calibrated against the slower makeLevelMapFN
		// inputs are the adjustment array and five standard levels adjustment settings

		//note (11-14-04): output white seems over-sensitive? blowing out around output-white 220
		

	float _j, _D1, _D2, _mapLength;
	point _Lpt, _Rpt, _Cpt1, _Cpt2;

	// enforce limits
	_gamma = (_gamma > 10) ? 10:_gamma;
	_gamma = (_gamma < 0.1) ? 0.1:_gamma;
	_gamma = (_gamma < 1) ? 1- (1-_gamma) * 0.9 : _gamma;

	
	_mapLength = ArrayFloatCount(_lmap)-1;
	_gamma = 1/_gamma; // invert value to match Photoshop's values
	_outBlack = (_outWhite-_outBlack > 0) ? _outBlack : _outWhite-1;	// corrects for  reversal of inWhite and inBlack

	_Lpt = {_inBlack/_mapLength, _outBlack/_mapLength};
	_Rpt = {_inWhite/_mapLength, _outWhite/_mapLength};
	
	if (_gamma > 1)
		_j = power(_gamma/10, exp(1))
		_D1 = 1 - 1/_gamma - _j/10;
		_D2 = _j;
		_Cpt1.x = sin(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.x; 
		_Cpt1.y = cos(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.y;
	
		Interpolate(_Lpt, _Cpt1, (_inWhite-_inBlack)/255, _Cpt1)	// correct for input scaling (horizontal)
	
	else // gammma <= 1
		
		_j = power(1.825, -_gamma) - 0.445;	// I don't know why these numbers work, they were discovered after extensive testing and charting	
		_D1 = power(4,-_gamma) + _j/10 ;
		_D2 = 1-_gamma - _j
		
		_Cpt1.x = sin(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.x;
		_Cpt1.y = cos(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.y;
		
		Interpolate(_Lpt, _Cpt1, (_outWhite - _outBlack)/_mapLength, _Cpt1)		// correct for output scaling (vertical)

	end if
		
	Interpolate(_Cpt1, _Rpt, 1-_D2, _Cpt2)	// possibly save the subtraction by reversing the points...
	
	BezToLevelMap(_lmap, _Lpt, _Cpt1, _Cpt2, _Rpt, 0, _mapLength, TRUE);
	
	if (_inBlack > 0)
		_Cpt1 = {0, _Lpt.y};
		BezToLevelMap(_lmap, _Cpt1, _Cpt1, _Lpt, _Lpt, 0, _inBlack, TRUE);
	end if
	if (_inWhite < _mapLength)
		_Cpt1 = {1, _Rpt.y};
		BezToLevelMap(_lmap, _Rpt, _Rpt, _Cpt1, _Cpt1, _inWhite, _mapLength, TRUE);
	end if

end


// END "makeLevelMapBez.fxscript"
 






on normalizeVector3d(point3d _V)
	float _l;
	_l = sqrt(power(_V.x,2) + power(_V.y,2) + power(_V.z,2));
	_V /= _l // transforms _V into a normalized vector, length = 1;
end 

on crossProduct(point3d _V1, point3d _V2, point3d _result)
	_result = {_V1.y * _V2.z - _V1.z * _V2.y, _V2.x * _V1.z - _V2.z * _V1.x, _V1.x * _V2.y - _V1.y * _V2.x}
end 

on dotProduct3d(point3d _U, point3d _V); return (_U.x*_V.x + _U.y*_V.y + _U.z*_V.z); end 





on flip3D(image _src1, image _src2, image _dest, image _LightMap, image _ShadowMap, point _centerPt, value _w, value _h, value _ratio, color _lightColor,  color _shadowColor, value _doX, value _doY, value _doZ, point3d _L)

	// _doX, _doY, _doZ control how many revolutions the function will perform. 0 = no revolutions, 0.5 = 180 degree rotation
	// _L is the light vector
	// turn off lights by sending negative colors to light/shadow colors (color *= -1)

	if (_w > 0 && _h > 0) // width of incoming box has non-zero h/w
		point _inBox[4], _outBox[4];
		float _dimmer;
		point3d _norm;
		color _lightIntensity;

		if (_ratio <= 0 || _ratio >= 1)	// no 3d, straight blit, check for rotations first!
			
			//makeRect(_inBox, _centerPt.x-_w/2, _centerPt.y-_h/2, _w, _h);
			makeRect(_inBox, floor(_centerPt.x-_w/2), floor(_centerPt.y-_h/2), ceil(_w), ceil(_h));

			_outBox = _inBox;

			if (_ratio >= 1 && ((doX+doY)*2&1))
				blitRect(_src2, _inBox, _dest, _outBox);	
			else
				if (_ratio>=1 && doX*2&1 && doY*2&1)
					mirrorRect(_outBox, (doY - integer(doY)) * 2, (doX - integer(doX)) * 2) ;
					//mirrorRect(_outBox, doY&1, doX&1) ;
				end if
				blitRect(_src1, _inBox, _dest, _outBox);	
			end if

			if (_LightColor.a >= 0 || _ShadowColor.a >= 0)
				_norm = {0,0,1};
				_dimmer = dotproduct3d(_norm, _L);

				FillPoly(_outBox, _ShadowMap, kwhite)
				FillPoly(_outBox, _LightMap, kblack)
			
				// trim _dimmer values to light spread:
				_dimmer = (_dimmer - cos(lSpread/2))/ (1-cos(lSpread/2));
				_dimmer = (_dimmer < 0) ? 0 : _dimmer;
							
				_lightIntensity = {255, _dimmer*_lightColor.r, _dimmer*_lightColor.g, _dimmer*_lightColor.b};
				FillPoly(_outBox, _LightMap, _lightIntensity)

			end if
		else

			point _pt0;
			point3d _centerPt3d, _v1, _v2, _eye3d, _box3d[4]
			
			dimensionsOf(dest, _pt0.x, _pt0.y);
			image _img0[_pt0.x][_pt0.y], _img1[_pt0.x][_pt0.y];
			
			_ratio = (_ratio < 0) ? 0 : (_ratio > 1) ? 1 : _ratio;
	
			makeRect(_inBox, floor(_centerPt.x-_w/2), floor(_centerPt.y-_h/2), ceil(_w), ceil(_h));
		
			_centerPt3d = {_centerPt.x, _centerPt.y, 0};
			dimensionsOf(_dest, _pt0.x, _pt0.y);
			_pt0 *= 0.5;
			_eye3d = {0,0, distto(_inBox[0], inBox[2])/(2*tan(viewAngle/2))*aspectOf(_dest)}; 
			_eye3d = {0,0,_pt0.x/(2*tan(viewAngle/2))}; 
			
			Convert2dto3d(_inBox, _box3d, 0);
			
			// standard rotation
			Rotate3d(_box3D, _centerPt3D, _ratio * 360 * _doX, _ratio * 360 * _doY, _ratio * 360 * _doZ);
	
			// one side cube spin: (probably run this twice with a 90¡ offset for the incoming turn, that might require a change in incoming controls
	//		_centerPt3d.z -= _w/2; Rotate3d(_box3D, _centerPt3D, _ratio * 180 * _doX, _ratio * 180 * _doY, _ratio * 180 * _doZ); _centerPt3d.z += _w/2;
	
			// corner flip:
	//	Rotate3d(_box3D, _centerPt3D, 0, 0, -flipAngle + 90); Rotate3d(_box3D, _centerPt3D, 0, _ratio * 360 * _doY, 0); Rotate3d(_box3D, _centerPt3D, 0, 0, flipAngle + 90);
				
			// zero offset and normalize edge vectors of plane.
			_v1 = {_box3d[1].x - _box3d[0].x, _box3d[1].y - _box3d[0].y, _box3d[1].z - _box3d[0].z}; 
			_v2 = {_box3d[3].x - _box3d[0].x, _box3d[3].y - _box3d[0].y, _box3d[3].z - _box3d[0].z};
			normalizeVector3d(_v1);
			normalizeVector3d(_v2);
		
			crossProduct(_v2, _v1, _norm);	//  the surface normal vector of the plane
			
			_v1 = {_eye3d.x - _box3d[0].x, _eye3d.y - _box3d[0].y, _eye3d.z - _box3d[0].z}; // intercept vector from eye3d to plane
			normalizeVector3d(_v1);
		
			Convert3dto2d(_box3D, _outBox, _eye3d);
		
			channelFill(_img0, 0, 0,127, 127);
			channelFill(_img1, 0, 0, 127, 127);
					
			if (_LightColor.a >= 0 || _ShadowColor.a >= 0)
				_dimmer = dotproduct3d(_norm, _L);
	
			
				// erase previous light/shadow information:
				FillPoly(_outBox, _ShadowMap, kwhite)
				FillPoly(_outBox, _LightMap, kblack)
			end if
			
			if (dotproduct3d(_v1, _norm) < 0)	// _src1 side
				blitRect(_src1, _inBox, _dest, _outBox);
		
				if (_LightColor.a >= 0 || _ShadowColor.a >= 0)
					if (_dimmer < 0) 
						// fill to lightmap
					
						// trim _dimmer values to light spread:
						_dimmer = (_dimmer + cos(lSpread/2))/ (1-cos(lSpread/2));
						_dimmer = (_dimmer > 0) ? 0 : _dimmer;
						
						_lightIntensity = {255, -_dimmer*_lightColor.r, -_dimmer*_lightColor.g,-_dimmer*_lightColor.b};
						FillPoly(_outBox, _LightMap, _lightIntensity)
					else
						// fill to shadowmap
						_lightIntensity = {255, 255-_dimmer*(255 - _shadowColor.r), 255-_dimmer*(255 - _shadowColor.g), 255-_dimmer*(255 - _shadowColor.b)};
						FillPoly(_outBox, _ShadowMap, _lightIntensity);
					end if
				end if
			else			// _src2 side
				mirrorRect(_inBox, (doY - integer(doY)) * 2, (doX - integer(doX)) * 2) ;
				blitRect(_src2, _inBox, _dest, _outBox);	
				
				if (_LightColor.a >= 0 || _ShadowColor.a >= 0)
					if (_dimmer > 0) 
						// fill to lightmap
						
						// trim _dimmer values to light spread:
						_dimmer = (_dimmer - cos(lSpread/2))/ (1-cos(lSpread/2));
						_dimmer = (_dimmer < 0) ? 0 : _dimmer;
								
						_lightIntensity = {255, _dimmer*_lightColor.r, _dimmer*_lightColor.g, _dimmer*_lightColor.b};
						FillPoly(_outBox, _LightMap, _lightIntensity)
					else
						// fill to shadowmap
						_lightIntensity = {255, 255+_dimmer*(255 - _shadowColor.r), 255+_dimmer*(255 - _shadowColor.g), 255+_dimmer*(255 - _shadowColor.b)};
						FillPoly(_outBox, _ShadowMap, _lightIntensity)
					end if
				end if
			end if
	
		
												
			if (0)	// draw normals from corners:
				float _j;
				point _pt1;
				point3d _inorm;
				
				_inorm *= 0;	// inversion of the positive surface normal, used to determine which side is facing where.
				_inorm -= _norm
				_norm *= 50; 
				_inorm *= 50
				for _j = 0 to 3
					_norm += _box3D[_j];
					_inorm += _box3D[_j];
					Convert3dto2d(_norm, _pt0, _eye3d);
					Convert3dto2d(_box3d[_j], _pt1, _eye3d);
					Line(_pt0, _pt1, dest, kblue, 1);
			
					Convert3dto2d(_inorm, _pt0, _eye3d);
					Line(_pt0, _pt1, dest, kred, 1);
			
					_norm -= _box3D[_j];
					_inorm -= _box3D[_j];
				next;
			end if
		end if
	end if
end 



on ShowLightSource(point3d _L, value _n);
	point3d _eye3d;
	point _pt0, _pt1;

	dimensionsOf(dest, _pt0.x, _pt0.y)
	normalizeVector3d(_L);
	_L *= _n;	
	_eye3d = {0,0, _pt0.x/(2*tan(viewAngle/2))}; 
			
	Convert3dto2d(_L, _pt1, _eye3d);
	_pt0 *= 0;
	Line(_pt0, _pt1, dest, kred, 1);
			
	DrawSoftDot(dest, _pt1, kround, (_L.z/50 + 2) * 10, 8, 1, kwhite, 0.7, aspectof(dest));

end 

on blitSquish(image _src1, image _src2, image _dest, point _centerPt, value _w, value _h, value _ratio, value _doX, value _doY)
	if (_w > 0 && _h > 0) // width of incoming box has non-zero h/w
		
		point _inBox[4], _outBox[4];
		makeRect(_inBox, floor(_centerPt.x-_w/2), floor(_centerPt.y-_h/2), ceil(_w), ceil(_h));
		if (_ratio <= 0 || _ratio >= 1)	// straight blit
			_outBox = _inbox;
			if (_ratio <= 0)
				blitRect(_src1, _inBox, _dest, _outBox);
			else if (_ratio >= 1)
				blitRect(_src2, _inBox, _dest, _outBox);
			end if
		else
		
		float _halfRatio
		_halfRatio = (_ratio < 0.5) ? _ratio*2 : (1-_ratio)*2;
		_halfRatio = easeMiddle(_ratio, 66, 1);
		if (_doX && !_doY)
			//image _img[(_inBox[1].x - _inBox[0].x) * (1- easeMiddle( _ratio, easing, easeMethod)) + 1][(_inBox[3].y - _inBox[0].y)];
			image _img[(_inBox[1].x - _inBox[0].x) *(1-_halfRatio)+1][(_inBox[3].y - _inBox[0].y)];
		else if (!_doX && _doY)
			image _img[(_inBox[1].x - _inBox[0].x)][(_inBox[3].y - _inBox[0].y) * (1-_halfRatio) * aspectOf(_dest) + 1];
		else if (_doX && _doY)
			image _img[(_inBox[1].x - _inBox[0].x) * (1- _halfRatio) + 1][(_inBox[3].y - _inBox[0].y) * (1-_halfRatio) * aspectOf(_dest) + 1];
		end if

		boundsOf(_img, _outBox);
		
		if (_ratio < 0.5)
			BlitRect(_src1, _inBox, _img, _outBox);
		else
			BlitRect(_src2, _inBox, _img, _outBox);
		end if

		
		BlitRect(_img, _outBox, _dest, _inBox)

		//numreporter(_dest, _halfRatio, "HalfRatio", kfloat4, 0, 28, 1);
		end if
	end if

end


on additiveDissolve(image _src1, image _src2, image _dest, point _pt, value _ratio, value _w, value _h, value _easing, value _easeMethod, value _lag, value _stackOrder)

	float _a[256], _eRatio, _ieratio, _u, _g, _d;
	point _inBox[4], _outBox[4];

	image _img1[_w][_h], _img2[_w][_h];	
	makeRect(_inBox, _pt.x-_w/2, _pt.y-_h/2, _w, _h);
	boundsOf(_img1, _outBox);
	blitRect(_src1, _inBox, _img1, _outBox);
	blitRect(_src2, _inBox, _img2, _outBox);
	
	_eRatio = ease(_ratio, _easing, _easemethod); 
	_ieRatio = ease(1- _ratio, _easing, _easemethod); 
	
	if (getPixelFormat(_dest) != kFormatYUV219)	// add check for existing color space
		ConvertImage(_img, _img, kFormatYUV219);
		ConvertImage(_dest, _dest, kFormatYUV219);
	end if

	channelcopy(_img1, _img1, kred, kred, kgreen, kblue);
	channelcopy(_img2, _img2, kred, kred, kgreen, kblue);

	_u = _ieRatio/_lag;  
	_d = _ieRatio/_lag + 1- 1/_lag;
	_g = _ieRatio/(_lag + 0.2);

	_u = (_u > 1) ? 1 : _u
	_d = (_d < 0) ? 0 : _d
	_g = (_g > 1) ? 1 : _g

	makeLevelMapBez(_a, 0, _g, 255, 255*_d, 255 * _u);
	LevelMap(_img1, _img1, _a, linearRamp, linearRamp, linearRamp); // outgoing clip

	_u = _eRatio/_lag;  
	_d = _eRatio/_lag + 1- 1/_lag;
	_g = _eRatio/(_lag + 0.2);

	_u = (_u > 1) ? 1 : _u
	_d = (_d < 0) ? 0 : _d
	_g = (_g > 1) ? 1 : _g

	makeLevelMapBez(_a, 0, _g, 255, 255*_d, 255 * _u);
	LevelMap(_img2, _img2, _a, linearRamp, linearRamp, linearRamp); // incoming clip

	if (_stackOrder)
		matte(_img2, _img1, _img1, 1, kalpha);
	else
		matte(_img1, _img2, _img1, 1, kalpha);
	end if
	
	//matte(_img1, _img2, _img1, 0.5, kalpha);
	
	blitRect(_img1, _outBox, _dest, _inBox);

end



// INCLUDE "T_borderFade.fxscript"  v1.1

on T_borderFade(image _src1, image _src2, image _dest, point _centerPt, value _w, value _h, value _ratio, value _lineMaxWidth, color _lineColor)
	// a simple fade transition effect with a time-variable width border

	
	if (_w > 0 && _h > 0) // width of incoming box has non-zero h/w
		
		point _inBox[4], _outBox[4];
		makeRect(_inBox, floor(_centerPt.x-_w/2), floor(_centerPt.y-_h/2), ceil(_w), ceil(_h));

		if (_ratio <= 0 || _ratio >= 1)	// straight blit
			_outBox = _inbox;
			if (_ratio <= 0)
				blitRect(_src1, _inBox, _dest, _outBox);
			else if (_ratio >= 1)
				blitRect(_src2, _inBox, _dest, _outBox);
			end if

		else	// do transtion effect
		
			image _img1[_w][_h], _img2[_w][_h];		// effects are only calculated at output size

			makeRect(_inBox, _centerPt.x-_w/2, _centerPt.y-_h/2, _w, _h);

			boundsOf(_img1, _outBox);
			blitRect(_src1, _inBox, _img1, _outBox);
			blitRect(_src2, _inBox, _img2, _outBox);
			
			matte(_img2, _img1, _img1, _ratio, kalpha);
			

			Line(_outBox[0], _outBox[1], _img1, _lineColor, _lineMaxWidth / aspectOf(_dest) * 2);
			Line(_outBox[3], _outBox[2], _img1, _lineColor, _lineMaxWidth / aspectOf(_dest) * 2);
			Line(_outBox[0], _outBox[3], _img1, _lineColor, _lineMaxWidth * 2);
			Line(_outBox[1], _outBox[2], _img1, _lineColor, _lineMaxWidth * 2);

			BlitRect(_img1, _outBox, _dest, _inBox)

// build an aspect correct framePoly replacement, offset end points inwards by width/aspect
// 	also draw single pixel outline outside box for sharper corners
//	possible outline poly tool which would adjust all line widths for aspect ratio differences?
//			framePoly(_inBox, _dest, kblack, easeMiddle(_ratio, -33,3) * _lineMaxWidth);
			
		end if
	end if
end 

// END "T_borderFade.fxscript"
 



//
//
//
// what is this thing? Does it work and is it worth keeping?

on ColorRampImage(image _img, color _fg, color _bg, value _thr, value _steps)

		// can convert an image into a two-color ramp in place with thresholding
		

	float _w, _h, _adj[256];
	dimensionsOf(_img, _w, _h);
	
	image _temp[_w][_h];
	
	Desaturate(_img, _img);
	channelcopy(_img, _img, kgreen, knone, knone, knone)


	makeThresholdMapBez(_adj, _thr, _steps, 255)	
	LevelMap(_img, _temp, _adj, linearRamp, linearRamp, linearRamp);
	
	channelfill(_img, _bg.a, _bg.r, _bg.g, _bg.b);
	channelfill(_temp, -1, _fg.r, _fg.g, _fg.b);
	matte(_temp, _img, _img, 1, kalpha);

end















point dims, inBox[4], outBox[4];
point cel;
point boxDims;

point3d centerPt3D, box3D[4];
point3d L;

float j, k, x, y, t0, t1;
float DEBUG;
float dirCOS, dirSIN
float CELVAL, CELx;
float rowDim, colDim, minRow, maxRow, minCol, maxCol

dimensionsOf(dest, dims.x, dims.y);
image LightMap[dims.x][dims.y],ShadowMap[dims.x][dims.y]

DEBUG = 0;
cel *= 0;

color tc
tc = {255, 255, 127, 127};

dir -=90;

dirSIN = sin(dir);
dirCOS = cos(dir);

channelfill(ShadowMap, 0, 255, 127, 127);
channelfill(LightMap, 0, 0,127, 127);



boxDims = {1/dotsX * dims.x, 1/dotsY * dims.y};

				boxdims += 0.1


for j = 0 to dotsX-1

	if (j&1)	// flip-loop for placing rows in interleaved reductive order (5,4,3,2,1) = (5,1,4,2,3)
		x = j - t0;
	else
		x = dotsX -1 - t0++;
	end if
	
	minRow = (dirCOS < 0) ? 1 + dirCOS : 1 - dirCOS;
	maxRow = (dirCOS < 0) ? 1 + 1/dotsX * dirCOS :  1 - 1/dotsX * dirCOS;
	rowDim = (dirCOS < 0) ? 1 + (x+1)/dotsX * dirCOS : 1 - (dotsX-x)/dotsX * dirCOS;

	cel.x =  x/dotsX * dims.x - dims.x/2 + 1/dotsX * dims.x/2;

	for k = 0 to dotsY-1
	
		if (k&1)	// flip-loop for placing rows in interleaved reductive order (5,4,3,2,1) = (5,1,4,2,3)
			y = k - t1;
		else
			y = dotsY - 1 - t1++;
		end if 	// note that conditional doesn't work with conditional operator due to over-aggressive execution incrementing the t1++ call when off
				
		minCol = (dirSIN < 0) ? 1 +  dirSIN : 1 - dirSIN;
		maxCol = (dirSIN < 0) ? 1 + 1/dotsY * dirSIN :  1 - 1/dotsY * dirSIN;
		colDim = (dirSIN < 0) ? 1 + (y+1)/dotsY * dirSIN : 1 - (dotsY-y)/dotsY * dirSIN;
			
		cel.y =  (y/dotsY) * dims.y - dims.y/2 + 1/dotsY * dims.y/2;

		CELx = (absNoInt(dirCOS) * (dotsX) + absNoInt(dirSIN) * (dotsY));

		if (dotsX + dotsY == 2) // single cell
			CELVAL = ratio
		else	// multiple cells
			CELVAL = ratio*(1+delay*(CELx-1))  + (1 - (1+delay*(CELx-1))) * (rowDim+colDIM-minRow-minCol)/(maxRow+maxCol-minRow-minCol);
		end if
		
		
		CELVAL = ease(CELVAL, easing, easeMethod);
		
		// transition effect:
	//	flip3D(src1, src2, dest, LightMap, ShadowMap, cel, boxDims.x, boxDims.y, ease(CELVAL, easing, easeMethod), LightColor, ShadowColor, doX, doY, doZ,L);
		blitSquish(src1, src2, dest, cel, boxDims.x, boxDims.y, CELVAL, (squish !=2), (squish >1));
	//	additiveDissolve(src1, src2, dest, cel, ease(CELVAL, easing, easeMethod), boxDims.x, boxDims.y, easing, easeMethod, 0.55, 0)
	//	T_borderFade(src1, src2, dest, cel, boxDims.x, boxDims.y, CELVAL, absNoInt(reverseLines - CELVAL) * lineWidth, lineColor)

		// debug lines:
//			DEBUG ++;
//				tc.r = CELVAL * 255
//				makeRect(outBox,(cel.x - boxDims.x/2), (cel.y - boxDims.y/2), (boxDims.x), (boxDims.y));
//				fillPoly(outbox, dest, tc);

	next
	t1 = 0;	// clear column counter
next
















