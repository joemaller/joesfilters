filter "Joe's Color Glow";group "Joe's Stylize Filters";input label0, "Select:", Label, ""input SampleColor, "Sample Color:", Color, 255, 255, 255, 255;input Tolerance, "Tolerance", Slider, 100, 0, 511;input Soften, "Edge Soften", Slider, 0, 0, 255;input inverter, "Invert", CheckBox, 0input label1, "Modify:", Label, ""input MatteBlur, "Blur Selection", Slider, 0, 0, 150 ramp 75;input threshold, "Threshold", slider, 100, 0, 255;input steps, "Steps", slider, 255, 2, 255input label2, "Apply:", Label, ""input BlurType, "Use", Popup, 1, "Color", "Image"input FillColor, "Fill Color:", Color, 255, 255, 0, 255;input BlurAmount, "Blur", Slider, 0, 0, 150 ramp 75;input ApplyAs, "Mode", Popup, 3, "Normal", "Multiply", "Screen", "Overlay", "Lighten", "Darken", "Add", "Subtract", "Difference";input Opacity, "Opacity", Slider, 100, 0, 100 label "%"input jfcopyright, "© Joe’s Filters", Label,"";input jfurl, "www.joesfilters.com", Label,"";InformationFlag("YUVaware")code// INCLUDE "basic_math.fxscript" r128on max(value _a, value _b); return (_a > _b) ? _a : _b; end on min(value _a, value _b); return (_a < _b) ? _a : _b; end on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end // END "basic_math.fxscript"// INCLUDE "BlurChannelInPlace.fxscript" r18on 	BlurChannelInPlace(image _src, image _dest, value _radius, value _A, value _R, value _G, value _B, value _aspect)		// _src, _dest : input/output image buffers	// _radius : blur radius	// _A, _R, _G, _B : boolean switches telling whether to blur the channel or not	// _aspect : aspect ratio the blur will be processed against			if (_radius > 0)		float _w, _h;		dimensionsOf(_dest, _w, _h);		image _temp[_w][_h];		if (_A + _R + _G + _B < 4)			_temp = _src;		end if				BlurChannel(_src, _temp, _radius, _A, _R, _G, _B, _aspect);			_dest = _temp;	else		_dest = _src;	end ifend// END "BlurChannelInPlace.fxscript"// INCLUDE "makeThresholdMapBez.fxscript" r130on makeThresholdMapBez(float _lmap, value _th, value _steps, value _mapLength)		// a fast thresholding function using BezToLevelMap instead of for:next loops		// _th is the point to threshold around, _steps are the number of grays around _th		// mapLength is 255 for 8-bit maps			point _p1, _p2;		if (_th - _steps/2 < 0)		_steps = _th * 2;	else if (_th + _steps/2 > _mapLength)		_steps = (_mapLength - _th) * 2;	end if		if (_th & 1 == 0)	// even		_p1 = {floor(_th - _steps/2)/_mapLength, 0};				_p2 = {floor(_th + _steps/2)/_mapLength, 1};			else // _th is odd		_p1 = {ceil(_th - _steps/2)/_mapLength, 0};				_p2 = {ceil(_th + _steps/2)/_mapLength, 1};			end if	BezToLevelMap(_lmap, _p1, _p1, _p2, _p2, 0, _mapLength, TRUE);end// END "makeThresholdMapBez.fxscript"float w, h;DimensionsOf(dest, w, h);image img0[w][h];	float i;dimensionsOf(Dest, w, h);image xbuffer[w][h], xbuffer2[w][h];if (getPixelFormat(src1) != kFormatYUV219)	ConvertImage(dest, dest, kFormatYUV219);//		ConvertImage(_temp2, _temp2, _colorSpace);//		ConvertImage(_dest, _dest, _colorSpace);else	dest = src1;end ifif GetPixelFormat(dest) == kFormatYUV219;	if BlurType == 1; setpixelformat(xbuffer, kFormatRGB255); ChannelFill(xbuffer, 255, FillColor.r, FillColor.g, FillColor.b); end if	if BlurType == 2; ConvertImage(src1, xbuffer, kFormatRGB255); end ifelse	if BlurType == 1; ChannelFill(xbuffer, 255, FillColor.r, FillColor.g, FillColor.b); end if	if BlurType == 2; xbuffer = src1; end ifend ifif GetPixelFormat(src1) != kFormatRGB255	ConvertImage(src1, xbuffer2, kFormatRGB255)else	setpixelformat(xbuffer2, kFormatRGB255)	xbuffer2 = src1end ifRGBColorKey(xbuffer2, xbuffer, SampleColor.r, Tolerance, SampleColor.g, Tolerance, SampleColor.b, Tolerance, Soften, false)//	YUVColorKey(srcImage, destImage, yTarget, yPass, uTarget, uPass, vTarget, vPass, softness, fillRGB)// ==============================================================================================================================// = CREATE A mall test case for experimenting with YUVColorKey to check how that works with sampled color vs converted colors. =// ==============================================================================================================================if (inverter==0); 	InvertChannel(xbuffer, xbuffer, 1, 0, 0, 0); // invert alpha channelend ifif (MatteBlur > 0)	BlurChannelInPlace(xbuffer, xbuffer, MatteBlur, 1, 0, 0, 0, aspectOf(Dest))end iffloat clut[256]makeThresholdMapBez(clut, threshold, steps, 255);levelMap(xbuffer, xbuffer, clut, linearramp, linearramp, linearramp);//	xbuffer=destif BlurAmount > 0;//		dest = xbuffer//		Blur(dest, xbuffer, BlurAmount, aspectOf(Dest))	BlurChannelInPlace(xbuffer, xbuffer, BlurAmount, 1, 1, 1, 1, aspectOf(Dest))end if;if ApplyAs ==1; Matte(xbuffer, xbuffer2, dest, Opacity/100, kalpha); end ifif ApplyAs ==2; Multiply(xbuffer2, xbuffer, dest, Opacity/100, kalpha); end ifif ApplyAs ==3; Screen(xbuffer2, xbuffer, dest, Opacity/100, kalpha); end ifif ApplyAs ==4; Overlay(xbuffer2, xbuffer, dest, Opacity/100, kalpha); end ifif ApplyAs ==5; Lighten(xbuffer2, xbuffer, dest, Opacity/100, kalpha); end ifif ApplyAs ==6; Darken(xbuffer2, xbuffer, dest, Opacity/100, kalpha); end ifif ApplyAs ==7; 				if GetPixelFormat(xbuffer2) != kFormatRGB255;					dest = xbuffer2;					ConvertImage(dest, xbuffer2, kFormatRGB255);					end if				if GetPixelFormat(xbuffer) != kFormatRGB255;					dest = xbuffer;					ConvertImage(dest, xbuffer, kFormatRGB255);					end if								setpixelformat(dest, kFormatRGB255)				dest = xbuffer2				add(dest, xbuffer, xbuffer2, Opacity/100, kalpha)				ConvertImage(xbuffer2, dest, kFormatYUV219);	end if;if ApplyAs ==8; 				if GetPixelFormat(xbuffer2) != kFormatRGB255;					dest = xbuffer2;					ConvertImage(dest, xbuffer2, kFormatRGB255);					end if				if GetPixelFormat(xbuffer) != kFormatRGB255;					dest = xbuffer;					ConvertImage(dest, xbuffer, kFormatRGB255);					end if								setpixelformat(dest, kFormatRGB255)				dest = xbuffer2				subtract(dest, xbuffer, xbuffer2, Opacity/100, kalpha)				ConvertImage(xbuffer2, dest, kFormatYUV219);	end if;if ApplyAs ==9; 				if GetPixelFormat(xbuffer2) != kFormatRGB255;					dest = xbuffer2;					ConvertImage(dest, xbuffer2, kFormatRGB255);					end if				if GetPixelFormat(xbuffer) != kFormatRGB255;					dest = xbuffer;					ConvertImage(dest, xbuffer, kFormatRGB255);					end if								setpixelformat(dest, kFormatRGB255)				dest = xbuffer2				Difference(dest, xbuffer, xbuffer2, kalpha);				ConvertImage(xbuffer2, dest, kFormatYUV219);					ChannelCopy(src1, dest, kalpha, knone, knone, knone); 				Matte(dest, src1,  dest, Opacity/100, knone); end if;