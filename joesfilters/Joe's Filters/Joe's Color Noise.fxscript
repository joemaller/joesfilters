filter "Joe's Color Noise";
group "Joe's Noise Filters";

input _r2, "_r2", Slider, 0, -1, 1;

input noiseFPS, "Noise FPS", slider, 24, 0, 60;


input NoiseAmount, "Amount", slider, 30, 0.1, 400 ramp 80;
input ScatterDance, "Fixed Noise", checkbox, 0

input noiseScale, "Scale Noise", slider, 200, 100, 1000 label "%";
input softnoise, "Blur Noise", slider, 0, 0, 50 ramp 80; 
input noiseAspect, "Noise Aspect", Slider, 1, 0, 2 detent 1;


input note1, "Color Mix:", Label,"";
input monochrome, "Monochrome", checkbox, 0;
input rFloor, "Red/Gray Floor", Slider, 0, 0, 255;
input r, "Red/Gray", Slider, 0, -1, 1;
input g, "Green", Slider, 255, 0, 255;
input b, "Blue", Slider, 0, -1, 1;

input ApplyAs, "Mode", Popup, 1, "Normal", "Multiply", "Screen", "Overlay", "Lighten", "Darken", "Add", "Subtract", "Difference";
input Opacity, "Opacity", slider, 100, 0, 100;

input colorSpace, "ColorSpace", popup, 3, "kFormatRGB255", "kFormatRGB219", "kFormatYUV219";


input title, "Joe's Filters", Label,"";
input title1, "www.joesfilters.com", Label,"";

RenderEachFrameWhenStill
InformationFlag("YUVaware");
producesAlpha

code

exposedBackground=1;



// INCLUDE "NumReporter.fxscript" v1.1

on NumReporter(image _destIMG, value _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd, rzoom;
	string reporter;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data, reporter, _numberformat);
	reporter = _label + " = " + reporter;
	DrawString(reporter, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));

end 

// END "NumReporter.fxscript"




on RandomNoiseScaled(image _dest, value _noise, value _r, value _g, value _b, value _scale, value _blur, value _aspect, value _colorspace)
	// 	_noise is a 0.1...400 vallue to match Photoshop's controls
	//	_scale is a floating 0-1 value
	//  _r, _g, _b are 0-255 values
	//  _RGBorYUV is 1-3 to match the numeric equivalents for the color space constants: kFormatRGB255=1, kFormatRGB219=2, kFormatYUV219=3;
	float _w, _h;
	point _box0[4], _box1[4];

	dimensionsOf(_dest, _w, _h);
	image _img0[(_w-1) * _scale * (_aspect > 1 ? (2 - _aspect): 1) + 1][(_h-1) * _scale *(_aspect < 1 ? _aspect : 1) + 1];

	ConvertImage(_img0, _img0, _colorspace);

	boundsof(_dest, _box0);
	boundsof(_img0, _box1);
	
float _rFloor, _rCeil, _gFloor, _gCeil, _bFloor, _bCeil;

if (_r < 0)
	_rFloor = 0;
	_rCeil = (_r + 1)*255;
else
	_rFloor = _r * 255;
	_rCeil = 255;
end if

if (_g < 0)
	_gFloor = 0;
	_gCeil = (_g + 1)*255;
else
	_gFloor = _g * 255;
	_gCeil = 255;
end if

if (_b < 0)

	_bFloor = (_colorspace==3) ? 128 : 0;
	_bCeil =  (_colorspace==3) ? 128 - (_b * 128) : (_b + 1)*255;
else
	_bFloor = (_colorspace==3) ? 128 + (_b * 128) : _b * 255;
	_bCeil =  (_colorspace==3) ? 128 : 255;
end if

DebugText("_bFloor : _bCeil", _bFloor, _bCeil);
		RandomNoise(_img0, ((_noise < 100) ? _noise/100 * 255 : 255), ((_noise > 100) ? (_noise-100)/300 * 255 : 0), _rFloor, _rCeil, ((_colorspace==3)?128-g/2:0), ((_colorspace==3)?128+g/2:g), _bFloor, _bCeil, 1);	// yuv

	if (_blur > 0);
		dimensionsOf(_img0, _w, _h);
		image _blurIMG[_w][_h];	
				
		_blurIMG = _img0;
		blurChannel(_img0, _blurIMG, _blur * _scale, 1, 1, 1, 1, 1);
		blitRect(_blurIMG, _box1, _dest, _box0);
	else
		blitRect(_img0, _box1, _dest, _box0);
	end if;

	DebugText("_img0.w",_w, "_img0.h", _h );
end 


float w, h, amin, amax;
point noiseRect[4], noiseRect2[4]; 

dimensionsOf(Dest, w, h);
float zoomfactor; zoomfactor = w/720;
float iFPS = fps * (fieldprocessing+1);		// interlace-corrected FPS


image xbuffer[w][h];
//	image scalebuffer[w * 100/noiseScale * 1/zoomfactor][h * 100/noiseScale * 1/zoomfactor * aspectof(dest)];
//	
//	amin = noiseamount < 100 ? noiseamount/100 * 255 : 255;
//	amax = noiseamount > 100 ? (noiseamount-100)/300 * 255 : 0;
//	
//	boundsof(dest, noiseRect);
//	boundsof(scalebuffer, noiseRect2);

on RandomSeedFPS(value _outFPS, value _inFPS)
	// uses Duration and Ratio?
	// use ratio of target clip to prevent
	float _fps;
		if (_outFPS > 0)
		_fps = _outFPS/_inFPS; // find output fps as percentage of _inFPS
		randomseed(integer(ratio * integer(_fps * duration)+1)/integer(_fps * duration)); // use fps modified ratio for RandomSeed
	else
		randomseed(0);
	end if

end


DebugText("ifps", iFPS);
DebugText("duration", duration);

RandomSeedFPS(noiseFPS, iFPS);

RandomNoiseScaled(dest, NoiseAmount, r, g, b, 100/noiseScale, softnoise, noiseAspect, colorSpace);

	if ApplyAs == 1; Matte(dest, src1, dest, opacity/100, kalpha); end if
	if ApplyAs == 2; Multiply(src1, xbuffer, dest, opacity/100, kalpha); end if
	if ApplyAs == 3; Screen(src1, xbuffer, dest, opacity/100, kalpha); end if
	if ApplyAs == 4; Overlay(src1, xbuffer, dest, opacity/100, kalpha); end if
	if ApplyAs == 5; Lighten(src1, xbuffer, dest, opacity/100, kalpha); end if
	if ApplyAs == 6; Darken(src1, xbuffer, dest, opacity/100, kalpha); end if
	if ApplyAs == 7; add(src1, xbuffer, dest, opacity/100, kalpha); end if;
	if ApplyAs == 8; 
			subtract(src1, xbuffer, dest, opacity/100, kalpha);
			ChannelCopy(src1, dest, kalpha, knone, knone, knone); 
	 end if;
	if ApplyAs == 9; 
			Difference(src1, xbuffer, dest, kalpha); 
			ChannelCopy(src1, dest, kalpha, knone, knone, knone); 
			Matte(dest, src1,  dest, opacity/100, knone); 
	end if;

