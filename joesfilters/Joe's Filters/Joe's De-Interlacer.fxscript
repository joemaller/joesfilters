filter "Joe's De-Interlacer";
group "Joe's Filters [BETA]";

input label0, "De-Interlace", label, "";
input FieldPicker, "Field", RadioGroup, 1, "First", "Second";
input FieldMethod, "Method", popup, 1, "Fast Interpolate", "Exact Interpolate", "Field Double";

input label1, "Motion Differencing", label, "";
input motiondiff, "Mask Sources", popup, 3, "None", "Single Frame", "Surrounding Fields", "Surrounding Frames", "Surrounding Frames (doubleDiff)";
input maskDetail, "Mask Detail", slider, 0, -10, 10;

input label2, "Mask Check", label, "";
input showMask, "View", popup, 1, "Merged Output", "Motion Mask", "Colorize Motion", "Motion Only";
input maskcolor, "Mask Color", color, 255, 128, 0, 255;
input maskopacity, "Color Opacity", slider, 60, 0, 100 label "%";

input label3, "Fade With Original", label, "";
input opacity, "Opacity", slider, 100, 0, 100;

input jfcopyright, "© Joe’s Filters", Label,"";
input jfurl, "www.joesfilters.com", Label,"";


fullframe
ProducesAlpha
InformationFlag("YUVaware");

code



// INCLUDE "basic math.fxscript"  v1.1

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 


// END "basic math.fxscript"
 







// INCLUDE "DeInterlace.fxscript"  v1.2

on DeInterlace(image _src, image _dest, value _field, value _method)
	// field:
	// 0 = top field, 1 = bottom field
	// method:
	// 1 = DeInterlaceFast
	// 2 = DeInterlaceInterpolate
	// 3 = field double
		
	if (_method == 1)
		DeInterlaceFast(_src, _dest, _field, true);
	else if (_method == 2)
		DeInterlaceInterpolate(_src, _dest, _field);
	else if (_method == 3)
		FieldDouble(_src, _dest, _field);
	end if
end

// END "DeInterlace.fxscript"
 


// INCLUDE "DeInterlaceInterpolate.fxscript"  v1.1

on DeInterlaceInterpolate(image _srcIMG, image _destIMG, value _field)
	// 0 = top field, 1 = bottom field
	
	float _i, _j;
	point _r1[4], _r2[4];
	
	BoundsOf(_srcIMG, _r1);
	
	image _halfIMG[_r1[1].x - _r1[0].x][(_r1[3].y - _r1[0].y) / 2];
	BoundsOf(_halfIMG, _r2);

	_i = _r2[0].y;

	for _j = _r1[0].y to _r1[3].y step 2
			
		_r1[0].y = _j + _field;
		_r1[1].y = _j + _field;
		_r1[2].y = _j + 1 + _field;
		_r1[3].y = _j + 1 + _field;
					
		_r2[0].y = _i;	// j starts at the topmost row of pixels in _halfIMG and counts up
		_r2[1].y = _i;	
		_r2[2].y = _i + 1;
		_r2[3].y = _i + 1;		

		_i++;

		BlitRect(_srcIMG, _r1, _halfIMG, _r2);
		
	next;
	
	boundsOf(_halfIMG, _r1);
	boundsOf(_destIMG, _r2);
	
	for _j = 0 to 3
		_r2[_j].y += _field; // correct for field bouncing
	next;
	
	BlitRect(_halfIMG, _r1, _destIMG, _r2);
	
end

// END "DeInterlaceInterpolate.fxscript"
 


// INCLUDE "DeInterlaceFast.fxscript"  v1.9

on DeInterlaceFast(image _srcIMG, image _destIMG, value _field, value _bounceFix)
	// _srcIMG : source image
	// _destIMG : destination image
	// _field : 0 = top field, 1 = bottom field
	// _bounceFix turns on spatial correction, this fixed a getField bug and is needed for occasional time-based de-interlace calls

	// this might fail at some future time if the scaling method in FCP changes

	float _j;
	point _r1[4], _r2[4], _pt;
	BoundsOf(_srcIMG, _r1);
	
	if (_field) // second field, shift box down
		_pt = {0,1};
		_r1 += _pt;	// shift top row down
		if ((_r1[3].y - _r1[0].y) & 1) 	// frame height needs to be even
			_r1[2].y -= 1;			// shift bottom down one row
			_r1[3].y -= 1;
		end if

	else // first field
		if ((_r1[3].y - _r1[0].y) & 1) // odd frame height
			_r1[2].y -= 1; // odd frame height, trim one row off of bottom
			_r1[3].y -= 1;
		end if
	end if
	
	image _halfIMG[_r1[1].x - _r1[0].x][(_r1[3].y - _r1[0].y) / 2];
	BoundsOf(_halfIMG, _r2);
	BlitRect(_srcIMG, _r1, _halfIMG, _r2); // smash blit (isolates fields)
	
	BoundsOf(_destIMG, _r1);
	
	if (_bounceFix)
		_pt = {0,(_field*2-1)/4};	// shift  sampling field up/down 0.25 px
		_r2 -= _pt;
	end if
		
	BlitRect(_halfIMG, _r2, _destIMG, _r1);
end

// END "DeInterlaceFast.fxscript"
 


// INCLUDE "FieldDouble.fxscript"  v1.1



on FieldDouble(image _srcIMG, image _destIMG, value _field)
	// 0 = top field, 1 = bottom field

	float _i, _j, _k;
	point _r1[4], _r2[4];
	
	BoundsOf(_srcIMG, _r1);
	
	image _tempIMG[_r1[1].x - _r1[0].x][(_r1[3].y - _r1[0].y)];

	_r2 = _r1;
	_r2[2].y = _r2[1].y + 1; 
	_r2[3].y = _r2[0].y + 1;


	for _j = _r1[0].y to _r1[3].y step 2
			
		_r1[0].y = _j + _field;
		_r1[1].y = _j + _field;
		_r1[2].y = _j + 1 + _field;
		_r1[3].y = _j + 1 + _field;

		for _k = 0 to 1
			BlitRect(_srcIMG, _r1, _tempIMG, _r2);
			
			for _i = 0 to 3
				_r2[_i].y += 1;
			next;
		next;
		
	next;
	
	boundsOf(_tempIMG, _r1);
	boundsOf(_destIMG, _r2);
	
	for _j = 0 to 3
		_r1[_j].y += _field ^1; // correct for field bouncing
	next;

	BlitRect(_tempIMG, _r1, _destIMG, _r2);
	
end

// END "FieldDouble.fxscript"
 


// INCLUDE "makeThresholdMapBez.fxscript"  v1.1

on makeThresholdMapBez(float _lmap, value _th, value _steps, value _mapLength)
		// a fast thresholding function using BezToLevelMap instead of for:next loops
		// _th is the point to thrreshold around, _steps are the number of grays around _th
		// mapLength is 255 for 8-bit maps
		
	point _p1, _p2;
	
	float _top, _bottom;
	
	if (_th - _steps/2 < 0)
		_steps = _th * 2;
	else if (_th + _steps/2 > _mapLength)
		_steps = (_mapLength - _th) * 2;
	end if
	
	if (_th & 1 == 0)	// even
		_p1 = {floor(_th - _steps/2)/_mapLength, 0};		
		_p2 = {floor(_th + _steps/2)/_mapLength, 1};		
	else // _th is odd
		_p1 = {ceil(_th - _steps/2)/_mapLength, 0};		
		_p2 = {ceil(_th + _steps/2)/_mapLength, 1};		
	end if

	BezToLevelMap(_lmap, _p1, _p1, _p2, _p2, 0, _mapLength, TRUE);

end

// END "makeThresholdMapBez.fxscript"
 


// INCLUDE "DifferenceMask.fxscript"  v1.2

on DifferenceMask(image _src1, image _src2, image _dest, value _threshold, value _steps, value _softness)
	
	// dependencies:
	//			makeThresholdMapBez
	//			channelcopyfit

	// _src1, src2 : images to compare
	// _dest : destination image buffer, results will replace this image's alpha channel
	// _threshold : Threshold break for difference mask
	// _steps : number of steps around threshold point
	// _softness : spread of the difference mask before thresholding.
	
	// compares two images and generates a mask based on differences between the two
	// the resulting mask will replace whatever alpha channel is in _dest
		
	float _diffmap[256];
	makeThresholdMapBez(_diffmap, _threshold, _steps, 255)	

	point _src1Box[4], _src2Box[4];
	boundsOf(_src1, _src1Box);
	boundsOf(_src2, _src2Box);
	
	if (_src1Box[2].x * _src1Box[2].y == _src2Box[2].x * _src2Box[2].y)	// _src1 and _src2 should be the same size, should be most common

		image _temp1[_src1Box[1].x - _src1Box[0].x][_src1Box[3].y - _src1Box[0].y],  _temp2[_src1Box[1].x - _src1Box[0].x][_src1Box[3].y - _src1Box[0].y];
		
		_temp1 = _src1;
		_temp2 = _src2;
		
	else if (_src1Box[2].x * _src1Box[2].y > _src2Box[2].x * _src2Box[2].y)	// _src1 has more pixels, scale _src1 down to match _src2 (bias for speed)
		image _temp1[_src2Box[1].x - _src2Box[0].x][_src2Box[3].y - _src2Box[0].y],  _temp2[_src2Box[1].x - _src2Box[0].x][_src2Box[3].y - _src2Box[0].y];

		_temp2 = _src2;
		blitRect(_src1, _src1Box, _temp1, _src2Box);

	else	// _src1 has fewer pixels than _src2, scale _src2 down to match

		image _temp1[_src1Box[1].x - _src1Box[0].x][_src1Box[3].y - _src1Box[0].y],  _temp2[_src1Box[1].x - _src1Box[0].x][_src1Box[3].y - _src1Box[0].y];
	
		_temp1 = _src1;
		blitRect(_src2, _src2Box, _temp2, _src1Box);

	end if
	
	Difference(_temp1, _temp2, _temp1, kalpha);	// setting targets up beforehand is faster
	BlurChannel(_temp1, _temp2, _softness, 1,1,1,1, aspectOf(_dest));
	
	if (GetPixelFormat(dest) == kFormatYUV219)
		LevelMap(_temp2, _temp2, linearRamp, _diffmap, linearRamp, linearRamp);
		channelcopyfit(_temp2, _dest, kred, knone, knone, knone);
	else
		LevelMap(_temp2, _temp2, linearRamp, linearRamp, _diffmap, linearRamp);
		channelcopyfit(_temp2, _dest, kgreen, knone, knone, knone);
	end if
end

// END "DifferenceMask.fxscript"
 


// INCLUDE "ChannelCopyFit.fxscript"  v1.5

on ChannelCopyFit(image _src, image _dest, value _A, value _R, value _G, value _B)
	// a combination of channelcopy and blitrect, scales any specified channel to fit the target
	// specifically for cases where a channel source is not the same size as the channel destination
	// _A, _R, _G & _B work just like Channelcopy and are of the set {kalpha, kred, kgreen, kblue}
	// This is meant to be a more versatile drop-in replacement for ChannelCopy
	
	point _srcBox[4], _destBox[4];
	boundsOf(_src, _srcBox);
	boundsOf(_dest, _destBox);

	if (_srcBox[2] == _destBox[2])
		// sizes are equal, normal channelcopy...
		channelCopy(_src, _dest, _A, _R, _G, _B);

	else	// sizes are unequal, do blit then channel
		
		
		//		check for size differences
		// 		do channelcopy on larger image to preserve resolution 
				
		if (_srcBox[2].x * _srcBox[2].y < _destBox[2].x * _destBox[2].y)	// _src is smaller than _dest
			image _temp[_destBox[1].x - _destBox[0].x][_destBox[3].y - _destBox[0].y]; // create second dest-sized image buffer
			blitRect(_src, _srcBox, _temp, _destBox);
			channelCopy(_temp, _dest, _A, _R, _G, _B);
		
		else // _src is larger than _dest
			image _temp[_srcBox[1].x - _srcBox[0].x][_srcBox[3].y - _srcBox[0].y]; // create second src-sized image buffer
			blitRect(_dest, _destBox, _temp, _srcBox);
			channelCopy(_src, _temp, _A, _R, _G, _B);
			blitRect(_temp, _srcBox, _dest, _destBox);
		
		end if
	end if
end

// END "ChannelCopyFit.fxscript"
 


// INCLUDE "getField.fxscript" r91

on getField(clip _clip1, value _offset, image _dest, value _nativeW, value _nativeH, value _field, value _bounceFix);
	//REQUIRES: 	DeInterlaceFast.fxscript

	// getField(clip, frame, dest, 720, 480, 1);
	// replacement for GetVideo which returns a single field of interlaced video
	// basic getVideo call plus dinmensions and field selection
	// field is 0 or 1 to match deinterlace functions
	
	// getvideo into half-height buffers appears to return only the upper field (line 0)
	// that means de-intelacing can be skipped for matching fields to save processing
	// _bounceFix flips the DeInterlaceFast field boucing switch
		
	
	image _half[_nativeW][_nativeH/2], _full[_nativeW][_nativeH];
	point _halfBox[4], _destBox[4];
	boundsOf(_half, _halfBox);
	boundsOf(_dest, _destBox);
		
	if (_field || fieldnumber -1 || aspectOf(_dest) == 1) // second spatial field
		getVideo(_clip1, _offset, _full);
		DeInterlaceFast(_full, _dest, _field, _bounceFix);		
	else		// first spatial field, lots of optimization tricks possible
		if (_halfBox[0].y == _destBox[0].y && _halfBox[2].y == _destBox[2].y)	// _half is the same size as _dest, skip a blit
			getVideo(_clip1, _offset, _dest);
		else
			getVideo(_clip1, _offset, _half);
			if (_bounceFix)
				point _pt
				_pt = {0,-1/4};	// shift  sampling field up 0.25 px (matches DeInterLaceFast)
				_halfBox -= _pt;
			end if

			blitRect(_half, _halfBox, _dest, _destBox);
		end if
	end if
end 

// END "getField.fxscript"
 

 







// INCLUDE "RGBtoYUVcolor.fxscript"  vNew

on RGBtoYUVcolor(color _rgbColor)
	color _temp;
	_temp = _rgbColor
	_rgbColor.r = _temp.r * 0.299 + _temp.g * 0.587 + _temp.b * 0.114 
	_rgbColor.g = _temp.r * -0.169 + _temp.g * -0.332 + _temp.b * 0.500 + 128; 
	_rgbColor.b = _temp.r* 0.500 + _temp.g * -0.419 + _temp.b * -0.0813 + 128;
end 

// END "RGBtoYUVcolor.fxscript"
 








exposedbackground = 1;

fieldPicker -= 1; //make this either 0 or 1
maskDetail *= -1 // reverse this to make more sense

float h, w, Nw, Nh, theField, fieldOrder, threshold, soften, clipDUR, clipOFFSET;

getnativesize(clip1, Nw, Nh);
getLimits(clip1, CLIPDUR, CLIPOFFSET);
dimensionsOf(dest, w, h);

image xbuffer[w][h];				//full size buffer
image xbuffer2[w][h];				//full size buffer

image halfbuffer[w][h/2];
image halfbuffer2[w][h/2];	

fieldOrder = (fieldNumber - 1 == topfield)
theField = fieldPicker ^ fieldOrder; // sets the spacial field to retrieve

DeInterlace(src1, dest, theField, FieldMethod); // primary deinterlace, 

if (clipDUR > 0)

	motiondiff += (frame == 0 && motiondiff == 3 && FieldPicker == 0); // catch 0-frame null-map on first-field, surrounding-fields
	
	// translate maskDetail values
	threshold = maskDetail * 0.4 + 8;
	soften = threshold/4
	
	if (motiondiff ==2)	// single frame, diff fields
		DeInterlaceFast(src1, halfbuffer, theField ^ 1, true);
		DifferenceMask(halfbuffer, dest, dest, threshold, 1, soften );	//  reuses pre-deinterlaced field
	
	else if (motiondiff == 3)	// surrounding fields
		getField(clip1, -clipOFFSET + frame + ((theField ^ 1) * 2 - 1), halfbuffer, Nw, Nh, theField ^ 1, false);
		DeInterlaceFast(src1, halfbuffer2, theField ^ 1,false);

		DifferenceMask(halfbuffer, halfbuffer2, dest, threshold, 1, soften);
		
	else if (motiondiff == 4) 	// surrounding frames, double-diff now-prev, now-next
		getVideo(clip1, -clipOFFSET + frame - 1, xbuffer);
		getVideo(clip1, -clipOFFSET + frame + 1, xbuffer2);
		
		difference(src1, xbuffer, xbuffer, kalpha);
		difference(src1, xbuffer2, xbuffer2, kalpha);
		DifferenceMask(xbuffer, xbuffer2, xbuffer, threshold, 1, soften);
		channelcopy(xbuffer, dest, kalpha, knone, knone, knone);
		
	else if (motiondiff == 5) 	// surrounding frames, double-diff now-prev, now-next
		getVideo(clip1, -clipOFFSET + frame - 1, xbuffer);
		getVideo(clip1, -clipOFFSET + frame + 1, xbuffer2);
		
		DifferenceMask(src1, xbuffer, xbuffer, threshold, 1, soften);
		DifferenceMask(src1, xbuffer2, xbuffer2, threshold, 1, soften);
		add(xbuffer, xbuffer2, xbuffer, 1, kalpha)
		channelcopy(xbuffer, dest, kalpha, knone, knone, knone);
	end if			
 	
 	if (motiondiff != 1)	// if there's no motion differencing, we're done...
		if (showMask == 2) // show mask channel
			if (GetPixelFormat(dest) == kFormatYUV219)
				channelcopy(dest, dest, knone, kalpha, knone, knone);
				channelfill(dest, 255, -1, 127, 127);
			else
				channelcopy(dest, dest, knone, kalpha, kalpha, kalpha);
				channelfill(dest, 255, -1, -1, -1);
			end if
			
		else // standard or highlight motion
			if (showMask == 3)
				if (GetPixelFormat(dest) == kFormatYUV219)
					RGBtoYUVcolor(maskColor);
				end if
				xbuffer = dest;
				channelfill(xbuffer,-1, maskcolor.r, maskcolor.g, maskcolor.b);
				channelfill(dest,255, -1,-1,-1);
				matte(xbuffer, dest, dest, maskopacity/100, kalpha);
			end if
			
			if (showMask != 4)
				matte(dest, src1, dest, opacity/100, kalpha);
			end if
		end if
	end if
end if






