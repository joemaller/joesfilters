filter "Joe’s Dispacement Noise";
group "Joe’s Filters [BETA]";

input l1, "Displacement Options", Label, "";

input hOffset, "Horizontal Offset", Slider, 5, 0, 100;
input vOffset, "Vertical Offset", Slider, 5, 0, 200;

input multiplier, "Multiplier", Slider, 0.25, 0, 5 ramp 90;

input repeatEdges, "Repeat Edges", Checkbox, 1;

input l0, "Noise Options", Label, "";
input noiseScale, "Scale Noise", slider, 200, 100, 1000 label "%";
input softNoise, "Blur Noise", Slider, 0, 0, 50 ramp 80;
input noiseStretch, "Noise Stretch", Slider, 0, -1, 1 detent 0;
input noiseFPS, "Noise FPS", Slider, 24, 0, 60;
input showNoise, "ShowNoise", checkbox, 0;



RenderEachFrameWhenStill;
InformationFlag("YUVaware");
producesAlpha;


code

exposedBackground = 1;






// INCLUDE "RandomNoiseScaled.fxscript" r190

on RandomNoiseScaled(image _dest, value _noise, value _rFloor, value _rCeil, value _gFloor, value _gCeil, value _bFloor, value _bCeil, value _scale, value _blur, value _stretch, value _colorspace)
	// 	_noise is a 0...400 vallue to match Photoshop's controls
	//	_scale is a floating point value >1 (there's no point in down-scaling)
	//	_rFloor, _rCeil, _g..., _b... are 0-255 values
	//	_stretch is a value from -1 ... 1, 0 = no stretching, -1 = vertical lines, 1 = horizontal lines
	// 	_colorspace is 1-3 to match the numeric equivalents for the color space constants: kFormatRGB255=1, kFormatRGB219=2, kFormatYUV219=3;
	float _w, _h;
	point _box0[4], _box1[4];

	dimensionsOf(_dest, _w, _h);
	_w /= _scale;
	_h /= _scale;
	
	if (_stretch < 0)
		_h *= 1 + _stretch;
		if (_h < 1); _h = 1; end if
	else if (_stretch > 0)
		_w *= 1-_stretch;
		if (_w < 1); _w = 1; end if
	end if
	
	image _img0[_w + _blur*2][_h + _blur*2];	// increase the size of the noise buffer by the _blur radius
	ConvertImage(_img0, _img0, _colorspace);

	boundsof(_dest, _box0);
	MakeRect(_box1, -_w/2, -_h/2, _w, _h);	// do this instead of BoundOf to compensate for blurring outside the frame

	RandomNoise(_img0, ((_noise < 100) ? _noise/100 * 255 : 255), ((_noise > 100) ? (_noise-100)/300 * 255 : 0), _rFloor, _rCeil, _gFloor, _gCeil, _bFloor, _bCeil, 1)

	if (_blur > 0);
		dimensionsOf(_img0, _w, _h);
		image _blurIMG[_w][_h];	
		ConvertImage(_blurIMG, _blurIMG, _colorspace);
		blurChannel(_img0, _blurIMG, _blur / _scale, 1, 1, 1, 1, 1);
		blitRect(_blurIMG, _box1, _dest, _box0);
	else
		blitRect(_img0, _box1, _dest, _box0);
	end if;

end

// END "RandomNoiseScaled.fxscript"




// INCLUDE "RandomSeedFPS.fxscript" r158

float trueFPS = fps * (fieldprocessing+1);		// interlace-corrected FPS

on RandomSeedFPS(value _fakeFPS, value _baseFPS, value _baseDuration, value _baseRatio)
	// this sets randomseed based on the completion of the clip calculated against the fakeFPS
	// this is accomplished by recreating ratio using the fake values
	// first determine a new fakeDuration, this is from the ration of fakeFPS/realFPS * duration
	// next calculate a fake frame number based
	// in most cases _baseDuration and _baseRatio are just duration and ratio, but better to keep them malleable

	if (_fakeFPS > 0)
		float _fpsRatio, _fakeDuration, _fakeRatio, _fakeFrame;
		_fpsRatio = _fakeFPS/_baseFPS; // find output fps as percentage of _baseFPS
		_fakeDuration = integer(_fpsRatio * duration);
		_fakeFrame = integer(_baseRatio * _fakeDuration + 1)
		_fakeRatio = _fakeFrame/_fakeDuration;
		randomseed(_fakeRatio); // use fps modified ratio for RandomSeed
	else
		randomseed(0);
	end if
end

// END "RandomSeedFPS.fxscript"



RandomSeedFPS(noiseFPS, trueFPS, duration, ratio);

RandomNoiseScaled(dest, 400, 128 - hOffset * 1.28, 128 + hOffset * 1.27, 128 - vOffset * 1.28, 128 + vOffset * 1.27, 0,0, noiseScale/100, softnoise, noiseStretch, 2);


float w, h;
DimensionsOf(dest, w, h);
image img0[w][h];

img0 = dest;


if (!showNoise)
	ConvertImage(dest, img0, kformatrgb219);
	Displace(src1, dest, img0, repeatEdges, multiplier, multiplier, 0, AspectOf(dest));	
end if

