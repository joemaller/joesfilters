Generator "Joe's Dot Spiral";
group "beta";

input cPoints, "Points Around Circle", slider, 12, 1, 36;
input cRings, "Rings Around Center", slider, 6, 1, 24;
input dSize, "Dot Size", slider, 72, 1, 100;
input dSpacing, "Dot Spacing", slider, 48, 1, 400;
input dFade, "Dot Fading", slider, 95, 1, 100;

input CenterPoint, "Center Point", point, 0, 0;

input inColor, "Dot Color", color, 255, 255, 127, 75;
input rotation, "Starting Angle", angle, 0, -360, 360;
input spiral, "Spiral", slider, 0, -1, 1;

input easing, "Easing", slider, 0, -100, 100;
input easeMethod, "Easing Method", popup, 3,  "Ease In", "Ease Out", "S-Curve";



input FadeDirection, "Fade Direction", checkbox, 0;

input shape, "Shape", Popup, 1, "Circle","Square",  "Diamond";

input jfcopyright, "© Joe’s Filters", Label,"";
input jfurl, "www.joesfilters.com", Label,"";

AlphaType(kalpha);

code

exposedbackground=1;








// INCLUDE "absNoInt.fxscript"  vNew

on absNoInt(value _num)	// returns the absolute floating point value of a number
	return _num * sign(_num);
end

// END "absNoInt.fxscript"
 



// INCLUDE "ease.fxscript"  v1.2


on ease(value _r, value _easing, value _method)
	
	// a single placeholder easing tool for easier use, 
	
	// required inputs:
	// input easing, "Easing", slider, 0, -100, 100;
	// input easeMethod, "Easing Method", popup, 3,  "Ease In", "Ease Out", "S-Curve";

	if (_method == 1)
		return easeIn(_r, _easing)
	else if (_method == 2)
		return easeOut(_r, _easing)
	else if (_method == 3)
		return easeS(_r, _easing)
	end if
end


on easeIn(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
	
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return power(_r, _easing);

end

on easeOut(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return 1 - power(1 - _r, _easing);
end


on easeS(value _r, value _easing)
	// modifies a 0-1 value towards an S-curve
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	if (_r < 0.5)
		return (power(2 * _r, _easing)/2);	// half simple gamma curve (first half S)
	else			
		return ((-power(-2 * _r + 2, _easing))/2 + 1);  // half inverted gamma curve (second half S)	
	end if
end  

// END "ease.fxscript"
 


on Bokeh(image _dest, point _centerPt, value _points, value _rings, value _size, value _spacing, value _angle, color _color, value _easing, value _easeMethod, value _fading, value _reverseFade)
	float _j, _k, _zoom;
	point _pt0;
	_zoom = 1/RenderRes;
	for _k = 1 to (_rings)
		for _j = 0 to (_points - 1)
			_pt0 = {cos(_j * 360/_points + _angle + _k/_rings * spiral * 180 ), sin(_j * 360/_points  + _angle+ _k/_rings * spiral * 180)};
//			_pt0 *= _k * _spacing/100 *  ease(_k/_rings, _easing, _easeMethod) * _size * _zoom *0.5 ;	//spacing based on dot size is not as nice...
			_pt0 *= _k * _spacing * _zoom;
			_pt0.y /= aspectOf(_dest);
			_pt0 += _centerPt;
			_color.a = ease(absNoInt((_reverseFade * (_rings) - _k)/(_rings-1)), _easing, _easeMethod) * 255 * 100/_fading;
			DrawSoftDot(_dest, _pt0, shape-1, ease(_k/_rings, _easing, _easeMethod) * _size * _zoom, 0, 0, _Color, 1, aspectOf(_dest)); //ease(absNoInt(_reverseFade - (_k/_rings)), _easing, _easeMethod), aspectOf(_dest));
		next;
	next;
end 

point dims

dimensionsOf(dest, dims.x, dims.y);
CenterPoint *= dims;

Bokeh(dest, CenterPoint, cPoints, cRings, dSize, dSpacing, rotation, inColor, easing, easeMethod, dFade, FadeDirection);

