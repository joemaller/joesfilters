filter "Joe’s RGB Color Noise";
group "Joe’s Filters [BETA]";


input noiseFPS, "Noise FPS", slider, 24, 0, 60;


input NoiseAmount, "Amount", slider, 400, 0, 400 ramp 80 detent 100;
input fixedNoise, "Fixed Noise", checkbox, 1

input noiseScale, "Scale Noise", slider, 200, 100, 1000 label "%";
input softnoise, "Blur Noise", slider, 0, 0, 50 ramp 80; 
input noiseAspect, "Noise Aspect", Slider, 1, 0, 2 detent 1;


input note1, "Color Mix:", Label,"";
input monochrome, "Monochrome", checkbox, 0;

input rFloor, "R/Y Floor", Slider, 0, 0, 255;
input rCeil, "R/Y Ceil", Slider, 255, 0, 255;

input gFloor, "G/cR Floor", Slider, 0, 0, 255;
input gCeil, "G/cR Ceil", Slider, 0, 0, 255;

input bFloor, "B/cB Floor", Slider, 0, 0, 255;
input bCeil, "B/cB Ceil", Slider, 0, 0, 255;

input ApplyAs, "Mode", Popup, 1, "Normal", "Multiply", "Screen", "Overlay", "Lighten", "Darken", "Add", "Subtract", "Difference";
input Opacity, "Opacity", slider, 100, 0, 100;

//	input colorSpace, "ColorSpace", popup, 2, "kFormatRGB255", "kFormatRGB219", "kFormatYUV219";


input doDisplace, "Displace", Checkbox, 1;
input lumascale, "lumascale", Slider, 0, 0, 1;
input mystery, "mystery", Slider, 640, 0.1, 1000;


input hscale, "Horizontal Scale", slider, 10, -200, 200 ramp 90 detent 10
input vscale, "Vertical Scale", slider, 10, -200, 200 ramp 90 detent 10


input displacement, "Displacement", Slider, 0, -0.5, 0.5 ramp 90;


input jfcopyright, "© Joe’s Filters", Label,"";
input jfurl, "www.joesfilters.com", Label,"";

RenderEachFrameWhenStill
InformationFlag("YUVaware");
producesAlpha
code

exposedBackground=1;





// INCLUDE "RandomNoiseScaled.fxscript" r157

on RandomNoiseScaled(image _dest, value _noise, value _rFloor, value _rCeil, value _gFloor, value _gCeil, value _bFloor, value _bCeil, value _scale, value _blur, value _aspect, value _colorspace)
	// 	_noise is a 0...400 vallue to match Photoshop's controls
	//	_scale is value >100 (there's no point in down-scaling)
	//	_rFloor, _rCeil, _g..., _b... are 0-255 values
	// 	_colorspace is 1-3 to match the numeric equivalents for the color space constants: kFormatRGB255=1, kFormatRGB219=2, kFormatYUV219=3;
	float _w, _h;
	point _box0[4], _box1[4];

	dimensionsOf(_dest, _w, _h);
	image _img0[(_w-1) / _scale * (_aspect > 1 ? 1/_aspect : 1) + 1][(_h-1) / _scale * (_aspect < 1 ? _aspect : 1) + 1];
	ConvertImage(_img0, _img0, _colorspace);

	boundsof(_dest, _box0);
	boundsof(_img0, _box1);
	
	RandomNoise(_img0, ((_noise < 100) ? _noise/100 * 255 : 255), ((_noise > 100) ? (_noise-100)/300 * 255 : 0), _rFloor, _rCeil, _gFloor, _gCeil, _bFloor, _bCeil, 1)

	if (_blur > 0);
		dimensionsOf(_img0, _w, _h);
		DebugText(_w,_h);
		image _blurIMG[_w][_h];	
		ConvertImage(_img0, _img0, _colorspace);
		
		_blurIMG = _img0;
		blurChannel(_img0, _blurIMG, _blur / _scale, 1, 1, 1, 1, 1);
		blitRect(_blurIMG, _box1, _dest, _box0);
	else
		blitRect(_img0, _box1, _dest, _box0);
	end if;

end 

// END "RandomNoiseScaled.fxscript"




// INCLUDE "basic_math.fxscript" r128

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 

// END "basic_math.fxscript"


// INCLUDE "makeThresholdMapBez.fxscript" r167

on makeThresholdMapBez(float _lmap, value _th, value _steps, value _mapLength)
		// requires basic_math.fxscript
		
		// a fast thresholding function using BezToLevelMap instead of for:next loops
		// _th is the point to threshold around, _steps are the number of grays around _th
		// mapLength is 255 for 8-bit maps
		
		
	point _p1, _p2;
	
	if (_th - _steps/2 < 0)
		_steps = _th * 2;
	else if (_th + _steps/2 > _mapLength)
		_steps = (_mapLength - _th) * 2;
	end if
	
	if (_th & 1 == 0)	// even
		_p1 = {floor(_th - _steps/2)/_mapLength, 0};		
		_p2 = {floor(_th + _steps/2)/_mapLength, 1};		
	else // _th is odd
		_p1 = {ceil(_th - _steps/2)/_mapLength, 0};		
		_p2 = {ceil(_th + _steps/2)/_mapLength, 1};		
	end if

	BezToLevelMap(_lmap, _p1, _p1, _p2, _p2, 0, _mapLength, TRUE);

end

// END "makeThresholdMapBez.fxscript"


// INCLUDE "RandomSeedFPS.fxscript" r158

float trueFPS = fps * (fieldprocessing+1);		// interlace-corrected FPS

on RandomSeedFPS(value _fakeFPS, value _baseFPS, value _baseDuration, value _baseRatio)
	// this sets randomseed based on the completion of the clip calculated against the fakeFPS
	// this is accomplished by recreating ratio using the fake values
	// first determine a new fakeDuration, this is from the ration of fakeFPS/realFPS * duration
	// next calculate a fake frame number based
	// in most cases _baseDuration and _baseRatio are just duration and ratio, but better to keep them malleable

	if (_fakeFPS > 0)
		float _fpsRatio, _fakeDuration, _fakeRatio, _fakeFrame;
		_fpsRatio = _fakeFPS/_baseFPS; // find output fps as percentage of _baseFPS
		_fakeDuration = integer(_fpsRatio * duration);
		_fakeFrame = integer(_baseRatio * _fakeDuration + 1)
		_fakeRatio = _fakeFrame/_fakeDuration;
		randomseed(_fakeRatio); // use fps modified ratio for RandomSeed
	else
		randomseed(0);
	end if
end

// END "RandomSeedFPS.fxscript"




RandomSeedFPS(noiseFPS, trueFPS, duration, ratio);
if (fixedNoise); randomseed((noiseFPS + 1)/trueFPS); end if

RandomNoiseScaled(dest, NoiseAmount, rFloor, rCeil, gFloor, gCeil, bFloor, bCeil, noiseScale/100, softnoise, noiseAspect, 2);

if (doDisplace)
	float w, h;
	DimensionsOf(dest, w, h);
	image displaceIMG[w][h];
	displaceIMG = dest;	// if this works, just run noise to another buffer to clean up the code.
end if




if ApplyAs == 1; Matte(dest, src1, dest, opacity/100, kalpha); end if
if ApplyAs == 2; Multiply(src1, dest, dest, opacity/100, kalpha); end if
if ApplyAs == 3; Screen(src1, dest, dest, opacity/100, kalpha); end if
if ApplyAs == 4; Overlay(src1, dest, dest, opacity/100, kalpha); end if
if ApplyAs == 5; Lighten(src1, dest, dest, opacity/100, kalpha); end if
if ApplyAs == 6; Darken(src1, dest, dest, opacity/100, kalpha); end if
if ApplyAs == 7; add(src1, dest, dest, opacity/100, kalpha); end if;
if ApplyAs == 8; 
		subtract(src1, dest, dest, opacity/100, kalpha);
		ChannelCopy(src1, dest, kalpha, knone, knone, knone); 
 end if;
if ApplyAs == 9; 
		Difference(src1, dest, dest, kalpha); 
		ChannelCopy(src1, dest, kalpha, knone, knone, knone); 
		Matte(dest, src1,  dest, opacity/100, knone); 
end if;



if (doDisplace)
	//	float dkey[256];
	//	makeThresholdMapBez(dkey, 128, 2, 255);	
//	LevelMap(displaceIMG, displaceIMG, linearRamp, dkey, dkey, dkey);
//	Displace(dest, dest, displaceIMG, 1, -hscale/100*h/mystery, vscale/100*h/mystery, lumascale, AspectOf(dest));
	Displace(dest, displaceIMG, displaceIMG, 1, -hscale/100*h/mystery, displacement, lumascale, AspectOf(dest));
	dest = displaceIMG
	
	
end if