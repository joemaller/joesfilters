filter "Joe's Saturation & Colorize";group "Joe's Filters [BETA]";input hue, "Hue Angle", Angle, 0, -360, 360 input desat, "Saturation", Slider, 0, 0, 1000 ramp 93 label "%" detent 100input colorize, "Colorize", checkbox, 0;input targetColor, "Target", Color, 255, 125, 22, 55;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";InformationFlag("YUVaware");codeon SaturationAndColorizeToTarget(image _src, image _dest, color _target, value _saturation)		endon ColorToVector(color _c, point3d _p)	if (_c.r + _c.g + _c.b == 0); _p *= 0; return; end if // do nothing for black input color	float _l;	_l = sqrt(power(_c.r,2) + power(_c.g,2) + power(_c.b,2));	_p = {_c.r, _c.g, _c.b};	_p /= _l;end// INCLUDE "pt3dReporter.fxscript" r124on Pt3dReporter(image _destIMG, point3d _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)		float rw, rh, ra, rd, rzoom;	string reporterX, reporterY, reporterZ;	color fontcolor;		DimensionsOf(_destIMG, rw, rh);	rzoom = rw/720;		fontcolor = {255,235,235,235};	settextfont("verdana");	setTextstyle(kbold);	setTextjustify(_justification);	setTextSize(_fontsize * rzoom);														NumToString(_data.x, reporterX, _numberformat);	NumToString(_data.y, reporterY, _numberformat);	NumToString(_data.z, reporterZ, _numberformat);	reporterX = _label + " = {" + reporterX + "," + reporterY + "," + reporterZ + "}";	DrawString(reporterX, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));end // END "pt3dReporter.fxscript"point3d normColor;ColorToVector(targetColor, normColor);float rTGT, gTGT, bTGT, rr, rg, rb, gr, gg, gb, br, bg, bb, offset0[3], mat[3][3];//define initial matrix values for straight pass-throughrr = 1; rg = 0; rb = 0;gr = 0; gg = 1; gb = 0;br = 0; bg = 0; bb = 1;hue = (hue + 360 )mod 360;desat = (colorize == 1) ? desat/100 : 1 - desat/100;	//makes the desaturate value a decimal value between 0 and 1if (hue < 120);						//need a range of 0-120 on either side of zero	rTGT = (120 -  hue)/60;else if (hue > 240);	rTGT = (120 - (abs(hue - 360)))/60;else 	rTGT = 0;end if	gTGT = (hue < 240) ? (120 - (abs(hue - 120)))/60 : 0;bTGT = (hue > 120) ? (120 - (abs(hue - 240)))/60 : 0;rTGT = (rTGT > 1) ? 1 : rTGT		//to prevent blowouts during colorizationgTGT = (gTGT > 1) ? 1 : gTGTbTGT = (bTGT > 1) ? 1 : bTGTif (colorize == 0 && (rTGT + gTGT + bTGT > 1));		//colorize values add up to more than 1	rTGT /= (rTGT + gTGT + bTGT); 	gTGT /= (rTGT + gTGT + bTGT); 	bTGT /= (rTGT + gTGT + bTGT); end if;rTGT = normColor.x;gTGT = normColor.y;bTGT = normColor.z;rr -= (rr - rTGT) * desat; 		rg -= (rg - rTGT) * desat;		rb -= (rb - rTGT) * desat;gr -= (gr - gTGT) * desat;		gg -= (gg - gTGT) * desat;		gb -= (gb - gTGT) * desat;br -= (br - bTGT) * desat;		bg -= (bg - bTGT) * desat;		bb -= (bb - bTGT) * desat;if colorize != 1;	mat = {rr, rg, rb, gr, gg, gb, br, bg, bb};else	mat = {rr, gg*desat/3, bb*desat/3, rr*desat/3, gg, bb*desat/3, rr*desat/3, gg*desat/3, bb};end if	colorTransform(Src1, Dest, mat, offset0, offset0);ColorToVector(targetColor, normColor);Pt3dReporter(dest, normColor, "normcolor", kfloat4, 0, 32, kcenterjustify);