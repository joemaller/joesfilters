filter "Joe's Saturation & Colorize";
group "Joe's Filters [BETA]";

//	input hue, "Hue Angle", Angle, 60, -360, 360 
input desat, "Saturation", Slider, 100, 0, 1000 ramp 93 label "%" detent 100
input colorize, "Colorize", checkbox, 1;

input targetColor, "Target", Color, 255, 0, 0, 255;

input title, "Joe's Filters", Label,"";
input title1, "www.joesfilters.com", Label,"";

InformationFlag("YUVaware");
InformationFlag("dontEraseDest");


code





// INCLUDE "basic_math.fxscript" r128

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 

// END "basic_math.fxscript"



// INCLUDE "NormalizeColorVector.fxscript" r248

on NormalizeColorVector(color _c, point3d _p)
	if (_c.r + _c.g + _c.b == 0); _p *= 0; _p += 1/sqrt(3); return; end if // do nothing for black input color

	float _l;
	_l = sqrt(power(_c.r,2) + power(_c.g,2) + power(_c.b,2));
	_p = {_c.r, _c.g, _c.b};
	_p /= _l;
end

// END "NormalizeColorVector.fxscript"



// INCLUDE "NormalizeVector3d.fxscript" r248

on NormalizeVector3d(point3d _V)
	float _l;
	_l = sqrt(power(_V.x,2) + power(_V.y,2) + power(_V.z,2));
	_V /= _l // transforms _V into a normalized vector, length = 1;
end 

// END "NormalizeVector3d.fxscript"


// INCLUDE "VectorStretch.fxscript" r248

on VectorStretch(point3d _v)
	_v /= max(_v.x, max(_v.y, _v.z));
end

// END "VectorStretch.fxscript"



// INCLUDE "NumReporter.fxscript" r247

on NumReporter(image _destIMG, value _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd;
	string reporter;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	
	if (getPixelFormat(_destIMG)==kFormatYUV219)
		fontcolor = {255,235,128,128};
	else
		fontcolor = {255,235,235,235};
	end if
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize);
													
	NumToString(_data, reporter, _numberformat);
	reporter = _label + " = " + reporter;
	DrawString(reporter, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));

end

// END "NumReporter.fxscript"


// INCLUDE "SaturationAndColorizeToTarget.fxscript" r249

on SaturationAndColorizeToTarget(image _src, image _dest, color _target, value _saturation, value _colorize)

	// DEPENDENCIES:  NormalizeColorVector, vectorStretch
	
	//	_saturation is a floating point value between 0 and 10
	//	_colorize is a boolean
	//	_target is the color to target desaturation on.

	float _mat[3][3], _colorSpace;
	float _rr, _rg, _rb, _gr, _gg, _gb, _br, _bg, _bb, _offset0[3];

	point3d _normedColor;
	NormalizeColorVector(_target, _normedColor);

	_colorSpace = getPixelFormat(_dest);

	if (_colorSpace != kFormatRGB219)
		ConvertImage(_src, _src, kFormatRGB219);
		SetPixelFormat(_dest, kFormatRGB219);
	end if
	
	_offset0 = {0,0,0};


	if (_colorize != 1)
		//define initial matrix values for straight pass-through
		_rr = 1; _rg = 0; _rb = 0;
		_gr = 0; _gg = 1; _gb = 0;
		_br = 0; _bg = 0; _bb = 1;

		_rr -= (_rr - _normedColor.x) * _saturation;		_rg -= (_rg - _normedColor.x) * _saturation; 	_rb -= (_rb - _normedColor.x) * _saturation;
		_gr -= (_gr - _normedColor.y) * _saturation;		_gg -= (_gg - _normedColor.y) * _saturation; 	_gb -= (_gb - _normedColor.y) * _saturation;
		_br -= (_br - _normedColor.z) * _saturation;		_bg -= (_bg - _normedColor.z) * _saturation; 	_bb -= (_bb - _normedColor.z) * _saturation;

		_mat = {_rr, _rg, _rb, _gr, _gg, _gb, _br, _bg, _bb};
	else

		_normedColor -= 0.5;
		_normedColor *= _saturation;
		_normedColor += 0.5;

		VectorStretch(_normedColor);

		if (_saturation > 1); 
			_normedColor *= _saturation; 
		end if
		
		_mat = {_normedColor.x, 0, 0, 	0, _normedColor.y, 0,		0, 0, _normedColor.z};
	end if	

	colorTransform(_src, _dest, _mat, _offset0, _offset0);
end

// END "SaturationAndColorizeToTarget.fxscript"










desat = (colorize == 1) ? desat/100 : 1 - desat/100;	//makes the desaturate value a decimal value between 0 and 1

SaturationAndColorizeToTarget(src1, dest, targetColor, desat, colorize);
