Filter "Joe's Temporal Replicator"
group "Joe's Filters [BETA]"

input gridCellCount, "Frame Count", slider, 16, 0, 225 ramp 80;
input direction, "Direction", popup, 1, "Top > Bottom", "Left > Right", "Bottom > Top", "Right > Left";
input reverseDirection, "Reverse Direction", checkbox, 0;
input alternateRowCols, "Alternate Row/Column Direction", checkbox, 0;

input temporalSpacing, "Temporal Spacing", slider, 1, 0, 300  ramp 50 detent 2, 4, 12, 15, 24, 25, 30;



input reverseTime, "Use", popup, 1,  "Future Frames", "Past Frame";
input basisSquare, "Basis Square", slider, 0, 0, 225 ramp 75 snap 0, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225;
// setting basisSquare to 0 will always pop to the next largest square

input currentOffset, "Offset Current Frame", slider, 0, 0, 225;

input fieldsAsFrames, "Fields as Frames", checkbox, 0;

input dimFrames, "Dim other frames", slider, 0, 0, 100;

input cropFrame, "Crop In", slider, 0, 0, 90 label "%";
input scaleValue, "Scale Output", slider, 100, 10, 300  ramp 80 label "%";


// input inputW, "Width", slider, 720, 1, 720;
// input inputH, "Height", slider, 240, 1, 480;


input jfcopyright, "© Joe’s Filters", Label,"";
input jfurl, "www.joesfilters.com", Label,"";

producesAlpha
code

// INCLUDE "basic math.fxscript"  v1.1

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 

// END "basic math.fxscript"

// INCLUDE "absNoInt.fxscript"  vNew

on absNoInt(value _num)	// returns the absolute floating point value of a number
	return _num * sign(_num);
end

// END "absNoInt.fxscript"
 



// INCLUDE "DeInterlaceFast.fxscript"  v1.9

on DeInterlaceFast(image _srcIMG, image _destIMG, value _field, value _bounceFix)
	// _srcIMG : source image
	// _destIMG : destination image
	// _field : 0 = top field, 1 = bottom field
	// _bounceFix turns on spatial correction, this fixed a getField bug and is needed for occasional time-based de-interlace calls

	// this might fail at some future time if the scaling method in FCP changes

	float _j;
	point _r1[4], _r2[4], _pt;
	BoundsOf(_srcIMG, _r1);
	
	if (_field) // second field, shift box down
		_pt = {0,1};
		_r1 += _pt;	// shift top row down
		if ((_r1[3].y - _r1[0].y) & 1) 	// frame height needs to be even
			_r1[2].y -= 1;			// shift bottom down one row
			_r1[3].y -= 1;
		end if

	else // first field
		if ((_r1[3].y - _r1[0].y) & 1) // odd frame height
			_r1[2].y -= 1; // odd frame height, trim one row off of bottom
			_r1[3].y -= 1;
		end if
	end if
	
	image _halfIMG[_r1[1].x - _r1[0].x][(_r1[3].y - _r1[0].y) / 2];
	BoundsOf(_halfIMG, _r2);
	BlitRect(_srcIMG, _r1, _halfIMG, _r2); // smash blit (isolates fields)
	
	BoundsOf(_destIMG, _r1);
	
	if (_bounceFix)
		_pt = {0,(_field*2-1)/4};	// shift  sampling field up/down 0.25 px
		_r2 -= _pt;
	end if
		
	BlitRect(_halfIMG, _r2, _destIMG, _r1);
end
// END "DeInterlaceFast.fxscript"
 
 
 

// INCLUDE "PlaceFrame.fxscript"  vNew

on PlaceFrame(image _src, image _dest, point _originPt, value _frameWidth, value _frameHeight, value _angle, value _orientation, value _cropFrame)
		
		// _src : source image to copy from
		// _dest : destination image buffer
		// _originPt: point in destination buffer where the fframe will be drawn
		// _frameWidth: width of the output frame
		// _frameHeight: height of the output frame
		// _angle: rotation angle of rotated frame, around _originPt
		// _orientation:  0-3 = destination rectangle corners, 4 = center
		// _cropFrame:  < 1 decimal value, crops into image similar to action-safe area definition
	
	point _srcBox[4], _destBox[4], _rotateCenter;
	float _FieldOrder;

	_FieldOrder = (fieldNumber - 1 == topfield);	// do this in here for one less thing to worry about

	boundsOf(_src, _srcBox);
	
	if (_orientation == 0)	
		MakeRect(_destBox, _originPt.x,  _originPt.y, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[0];

	else if (_orientation == 1)
		MakeRect(_destBox, _originPt.x - _frameWidth,  _originPt.y, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[1];

	else if (_orientation == 2)
		MakeRect(_destBox, _originPt.x - _frameWidth,  _originPt.y - _frameHeight, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[2];

	else if (_orientation == 3)
		MakeRect(_destBox, _originPt.x,  _originPt.y- _frameHeight, _frameWidth, _frameHeight);
		_rotateCenter = _destBox[3];
		
	else if (_orientation == 4)
		MakeRect(_destBox, _originPt.x - _frameWidth/2,  _originPt.y - _frameHeight/2, _frameWidth, _frameHeight);
		_rotateCenter = _originPt;
	end if
	
	Rotate(_destBox, _rotateCenter, _angle, aspectOf(_dest));
	
	_srcBox *= _cropFrame;			// crop into source frame
	
	_rotateCenter = {0, (fieldnumber-1)^_FieldOrder};	// reuse _rotateCenter for _srcBox field-shifting
	_srcBox += _rotateCenter;		// shift soucebox to compensate for field-based output
	blitRect(_src, _srcBox, _dest, _destBox);
	
end

// END "PlaceFrame.fxscript"
 

 









// INCLUDE "DrawGridFrames.fxscript"  v1.1

on DrawGridFrames(clip _clip1, value _w, value _h, value _gridCount, value _getFrame, value _offset, value _temporalSpacing, value _basisSquare, value _cropFrame, value _direction, value _reverseDirection, value _reverseTime, value _alternateRowCols, value _dimFrames)
	// _offset specifies the position of the current frame in time 
	// _smoothMotion sets the field-bouncing flag in deInterlaceFast	
	// direction: 0 = top>bottom, 1 = left>right, 2 = bottom>top, 3 = right>left
	// requires: DeInterlaceFast, PlaceFrame, ceil, absNoInt
	
		
	if (_gridCount > 0)	// do nothing if no squares
		float _Nw, _Nh, _clipDUR, _clipOFFSET;
		getnativesize(_clip1, _Nw, _Nh);		// possibly a bad decision, could be a slowdown since this could be double-called during an effect.
		getLimits(_clip1, _clipDUR, _clipOFFSET);
		float _FieldOrder; _FieldOrder = (fieldNumber - 1 == topfield);	// do this in here for one less thing to worry about, could be a problem later on.

		float _j, _bigSquare, _rows, _nowFrame, _prevFrame, _theField;
		point _pt, _box[4];
	
		_bigSquare = (_basisSquare == 0) ? ceil(Sqrt(integer(_gridCount))) : ceil(sqrt(_basisSquare));

		image _img0[_w/(_bigSquare)][2*_h/(_bigSquare)], _img2[_Nw][_Nh];
		_prevFrame = kundefined;
		
		if (_direction == 0 || _direction == 2)			// direction is vertical
			_pt.y = (_direction == 0) ? -_h/2 + _h/(2*_bigSquare) : _h/2 - _h/(2*_bigSquare);	// adjust start point here or move  placeFrame orientation?
		else 										// direction is horizontal
			_pt.x = (_direction == 1) ? -_w/2 + _w/(2*_bigSquare) : _w/2 - _w/(2*_bigSquare);
		end if
		
		for _j = 0 to (_gridCount - 1)
			
			if (_basisSquare != 0 && _j > _basisSquare); exit for; end if;	// seems inelegant, but working
			
			_nowFrame = _getFrame + ((_reverseTime * -_gridCount + _j) * _temporalSpacing + _reverseTime  * _temporalSpacing) / 2 * (_reverseTime * -2 + 1) - _offset * _temporalSpacing;
			_theField = (absnoint(_nowFrame) - abs(_nowFrame) > 0) ^ _fieldOrder;
			
			if (_prevFrame != _nowFrame)
				getVideo(_clip1, -_clipOFFSET + _nowFrame, _img2);
			end if
			
			_prevFrame = _nowFrame;
			
			DeInterlaceFast(_img2, _img0, _theField, true);

			if (_direction == 0 || _direction == 2)
				_pt.x = (_j%_bigSquare)/_bigSquare * _w - _w/2 + _w/2/_bigSquare;

				if (_alternateRowCols && _rows&1)
					_pt.x = _w - (_pt.x + _w/2) - _w/2;
				end if
				if (_reverseDirection)
					_pt.x = _w - (_pt.x + _w/2) - _w/2;
				end if
			else
				_pt.y =  (_j%_bigSquare)/_bigSquare * _h - _h/2 + _h/2/_bigSquare;
				
				if (_alternateRowCols && _rows&1)
					_pt.y = _h - (_pt.y + _h/2) - _h/2;
				end if
				if (_reverseDirection)
					_pt.y = _h - (_pt.y + _h/2) - _h/2;
				end if
			end if		
								
			if (_dimFrames < 1 && (integer(_nowFrame) - integer(_getFrame) != 0))	// dim other frames
				channelmultiply(_img0, _img0, 1, _dimFrames, _dimFrames, _dimFrames);
			end if
					
			MakeRect(_box, _pt.x, _pt.y, 1/_bigSquare * _w, 1/_bigSquare * _h);

			placeFrame(_img0, dest, _pt, 1/_bigSquare * _w, 1/_bigSquare * _h, 0, 4, _cropFrame);

			if (_j % _bigSquare == _bigSquare - 1)
				if (_direction == 0 || _direction == 2)
					_pt.y += (_direction == 0) ? _h/_bigSquare : -_h/_bigSquare
				else 
					_pt.x += (_direction == 1) ? _w/_bigSquare : -_w/_bigSquare
				end if
				_rows++;
			end if
		next
	end if	
end

// END "DrawGridFrames.fxscript"
 

reverseTime -=1;
exposedbackground=true;

float w,h;
dimensionsOf(dest, w, h);

channelfill(dest, 0,0,0,0);

drawGridFrames(clip1, w *scaleValue/100 , h *scaleValue/100, gridCellCount, ((fieldsAsFrames)?integer(frame/(fieldprocessing+1)):frame/(fieldprocessing+1)), currentOffset/(fieldprocessing+1), temporalSpacing, basisSquare,  1-cropFrame/100, direction-1, reverseDirection, reverseTime, alternateRowCols, 1 - dimFrames/100);












