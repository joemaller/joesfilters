on RandomNoiseScaled(image _dest, value _noise, value _rFloor, value _rCeil, value _gFloor, value _gCeil, value _bFloor, value _bCeil, value _scale, value _blur, value _stretch, value _colorspace)
	// 	_noise is a 0...400 vallue to match Photoshop's controls
	//	_scale is a floating point value >1 (there's no point in down-scaling)
	//	_rFloor, _rCeil, _g..., _b... are 0-255 values
	//	_stretch is a value from -1 ... 1, 0 = no stretching, -1 = vertical lines, 1 = horizontal lines
	// 	_colorspace is 1-3 to match the numeric equivalents for the color space constants: kFormatRGB255=1, kFormatRGB219=2, kFormatYUV219=3;
	float _w, _h;
	point _box0[4], _box1[4];

	dimensionsOf(_dest, _w, _h);
	_w /= _scale;
	_h /= _scale;
	
	if (_stretch < 0)
		_h *= 1 + _stretch;
		if (_h < 1); _h = 1; end if
	else if (_stretch > 0)
		_w *= 1-_stretch;
		if (_w < 1); _w = 1; end if
	end if
	
	image _img0[_w + _blur*2][_h + _blur*2];	// increase the size of the noise buffer by the _blur radius
	ConvertImage(_img0, _img0, _colorspace);

	boundsof(_dest, _box0);
	MakeRect(_box1, -_w/2, -_h/2, _w, _h);	// do this instead of BoundOf to compensate for blurring outside the frame

	RandomNoise(_img0, ((_noise < 100) ? _noise/100 * 255 : 255), ((_noise > 100) ? (_noise-100)/300 * 255 : 0), _rFloor, _rCeil, _gFloor, _gCeil, _bFloor, _bCeil, 1)

	if (_blur > 0);
		dimensionsOf(_img0, _w, _h);
		image _blurIMG[_w][_h];	
		ConvertImage(_blurIMG, _blurIMG, _colorspace);
		blurChannel(_img0, _blurIMG, _blur / _scale, 1, 1, 1, 1, 1);
		blitRect(_blurIMG, _box1, _dest, _box0);
	else
		blitRect(_img0, _box1, _dest, _box0);
	end if;

end
