// the purpose of this is to help with gamma/Bez translations
// might not be for public release...


filter "BezToLevelMap vs Gamma Translator";
group "FXScript Reference";


input aLength, "Array Length", slider, 255, 2, 1500;
input stepping, "Stepping", slider, 1, 1, 25;


input leftPt, "Left Point", point, -0.5, 0.5;
input ctlPt1, "Control Point 1", point, -0.25, 0;
input ctlPt2, "Control Point 2", point,  0.5, -0.5;
input rightPt,	"Right Point", point, 0.5, -0.5;


input inputBlack, "Input Black", slider, 0, 0, 253;
input gamma, "Gamma", slider, 1, 0.10, 5 ramp 85 detent 1;
input inputWhite, "Input White", slider, 255, 2, 255;

input outputBlack, "Output Black", slider, 0, 0, 255;
input outputWhite, "Output White", slider, 255, 0, 255;


input fxscriptreference, "www.FXScriptReference.org", label, "";

fullframe;




code

on PtReporter(image _destIMG, point _data, string _label, value _numberformat, value _h, value _fontsize, value _tracking)
	
	float rw, rh, ra, rd, rzoom;
	string reporterX, reporterY;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(kcenterjustify);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data.x, reporterX, _numberformat);
	NumToString(_data.y, reporterY, _numberformat);
	reporterX = _label + " = {" + reporterX + "," + reporterY + "}";
	DrawString(reporterX, 0, _h, _tracking,  _destIMG, fontcolor, aspectof(_destIMG));

end

on quickDot(point _p, value _color)
	point _temp;
	_temp = _p;
	_temp -= 0.5;
	_temp.x *= w;
	_temp.y *= h;
	
	DrawSoftDot(dest, _temp, kSquare, 3, 1, 1, _color, 0.5, aspectof(dest));
	
	
end


float w, h, i, j, a[256];
point x;

dimensionsOf(dest, w, h);



// LEVELS


for i = inputWhite to 255						//sets all pixels from inputwhite to 255 to maximum value
	a[i] = 1
next;

j = (inputWhite > inputBlack) ?	inputWhite - inputBlack: 1;  //sets the divisor for the next step, this will be the number of values between black and white

for i = inputBlack to inputWhite				//sets the ramp of pixels from black to white to a gamma adjusted curve of values
	a[i] = power((i-inputBlack)/j, gamma);
next;

outputBlack = (outputWhite-outputBlack > 0) ? outputBlack : outputWhite-1;	//corrects for impossible reversal of output values

a *= outputWhite-outputBlack;				//multiplies everything by the difference of output white and black, because the clut is fractional values, all values will decrease in the step after next
a += outputBlack;							//increases the clut by the output black, sets the bottommost level
a /= 255;									//corrects the total clut to make sure all 255 values fall between 0 and 1	




for j = 0 to 255 step stepping

	x = {j - 256/2, 1 -( a[j] * h - h/2)};
	DrawSoftDot(dest, x, kRound, 3, 1, 1, kblue, 1, aspectof(dest));

next


















ctlPt1 += 0.5;
ctlPt2 +=0.5;
rightPt += 0.5;
leftPt += 0.5;


BezToLevelMap(a, leftPt, ctlPt1, ctlPt2, rightPt, 0, aLength-1, TRUE);


for j = 0 to 255 step stepping

	x = {j - 256/2, a[j] * h - h/2};
	DrawSoftDot(dest, x, kRound, 3, 1, 1, kred, 1, aspectof(dest));
	x = {256/2 - j, (1 - a[j]) * h - h/2};
	DrawSoftDot(dest, x, kRound, 3, 1, 1, kmagenta, 1, aspectof(dest));

next

PtReporter(dest, leftPt, "LeftPt", kfloat2, h/2 * 0.2, 28, 1);
PtReporter(dest, ctlPt1, "ctlPt1", kfloat2, h/2 * 0.4, 28, 1);
PtReporter(dest, ctlPt2, "ctlPt2", kfloat2, h/2 * 0.6, 28, 1);
PtReporter(dest, rightPt, "RightPt", kfloat2, h/2 * 0.8, 28, 1);
 

 
 
quickDot(ctlPt1, kcyan);
quickDot(ctlPt2, kcyan);
quickDot(rightPt, kgreen);
quickDot(leftPt, kgreen);

x = {w, h};


ctlPt1 -= 0.5;
ctlPt2 -= 0.5;
leftPt -= 0.5;
rightPt -= 0.5;

ctlPt1 *= x;
ctlPt2 *= x;
rightPt *= x;
leftPt *= x;

// leftPt.x = aLength/-2;
//rightPt.x = aLength/2;

line(leftPt, ctlPt1, dest, kcyan, 1);
line(rightPt, ctlPt2, dest, kcyan, 1);


