filter "Joe's De-Focuser";
group "Joe's Filters [BETA]";

input cameraBlur, "CameraBlur", slider, 25, 0.1, 100;

//input method, "method", radiogroup, 1, "matte", "overlay", "lighten", "screen";

input cSides, "Sides", popup, 6, "one dot", "line", "Triangle", "Square", "Pentagon", "Hexagon", "Heptagon", "Octogon", "Nonagon", "Decagon"; // "Circle";
//input cRings, "Rings Around Center", slider, 2, 1, 24;
//input dSpacing, "Dot Spacing", slider, 2, 0.1, 10;
//input dFade, "Dot Fading", slider, 0, 0, 100;



//input preblur, "preblur", slider, 0, 0, 10;

//input dSize, "Dot Size", slider, 3, 1, 100;
input rotation, "Starting Angle", angle, 30, -360, 360;

//input CenterPoint, "Center Point", point, 0, 0;

//input inColor, "Dot Color", color, 255, 255, 127, 75;
//input spiral, "Spiral", slider, 0, -1, 1;

//input easing, "Easing", slider, 0, -100, 100;
//input easeMethod, "Easing Method", popup, 3,  "Ease In", "Ease Out", "S-Curve";

input gamma, "Gamma", slider, 1.1, 0.10, 5 ramp 85 detent 1;

//input realBlur, "Real Blur/steps", slider, 10, 1, 255;

//input doImage, "doImage", checkbox, 0;

//input FadeDirection, "Fade Direction", checkbox, 0;

//input shape, "Shape", Popup, 1, "Circle","Square",  "Diamond";

input labelspecular, "Not Yet Implemented", label, "";
input specularIntensity, "Specular Intensity", slider, 80, 0, 100;
input threshold, "Specular Threshold", slider, 200, 1, 255;

// informationFlag("YUVaware");
AlphaType(kalpha);

code

exposedbackground=1;




// INCLUDE "NumReporter.fxscript" v1.1

on NumReporter(image _destIMG, value _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd, rzoom;
	string reporter;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data, reporter, _numberformat);
	reporter = _label + " = " + reporter;
	DrawString(reporter, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));

end

// END "NumReporter.fxscript"

// INCLUDE "PtReporter.fxscript" v1.1

on PtReporter(image _destIMG, point _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd, rzoom;
	string reporterX, reporterY;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data.x, reporterX, _numberformat);
	NumToString(_data.y, reporterY, _numberformat);
	reporterX = _label + " = {" + reporterX + "," + reporterY + "}";
	DrawString(reporterX, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));

end

// END "PtReporter.fxscript"









// INCLUDE "absNoInt.fxscript"  vNew

on absNoInt(value _num)	// returns the absolute floating point value of a number
	return _num * sign(_num);
end

// END "absNoInt.fxscript"
 



// INCLUDE "ease.fxscript"  v1.2


on ease(value _r, value _easing, value _method)
	
	// a single placeholder easing tool for easier use, 
	
	// required inputs:
	// input easing, "Easing", slider, 0, -100, 100;
	// input easeMethod, "Easing Method", popup, 3,  "Ease In", "Ease Out", "S-Curve";

	if (_method == 1)
		return easeIn(_r, _easing)
	else if (_method == 2)
		return easeOut(_r, _easing)
	else if (_method == 3)
		return easeS(_r, _easing)
	end if
end


on easeIn(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
	
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return power(_r, _easing);

end

on easeOut(value _r, value _easing)
	// modifies a 0-1 value by the easing value
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	return 1 - power(1 - _r, _easing);
end


on easeS(value _r, value _easing)
	// modifies a 0-1 value towards an S-curve
	// easing should be a value between -100 and 100

	if (_r < 0 || _r > 1)
		return _r;
	end if
		
	_easing = (_easing < 0) ? 1 - _easing * 0.02 : 1/(1 + _easing * 0.02);

	if (_r < 0.5)
		return (power(2 * _r, _easing)/2);	// half simple gamma curve (first half S)
	else			
		return ((-power(-2 * _r + 2, _easing))/2 + 1);  // half inverted gamma curve (second half S)	
	end if
end  

// END "ease.fxscript"
 
// INCLUDE "basic math.fxscript" v1.1

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 

// END "basic math.fxscript"

// INCLUDE "ArrayFloatCount.fxscript" v1.2

on isIndexFloatArray(value _i, float _ar);return(_ar[_i][0] != kundefined); end 	//  checks for the existance of a zeroth index of the passed index
on isIndexFloat(value _i, float _ar);return(_ar[_i] != kundefined); end 
on ArrayFloatIndexExists(value _i, float _ar);return(isIndexFloatArray(_i, _ar) || isIndexFloat(_i, _ar)); end 

on ArrayFloatCount(float _ar)
	float _l, _r, _seed, _step, _counter;
	_seed = 7; // somewhat arbitrary, chosen after a lot of performance testing
	_step = _seed;
	
	_l = 1 // set this to save a loop checking the zeroth index
	_r = _l + _seed;

	repeat while true
		_counter++;

		if (ArrayFloatIndexExists(_l, _ar) && ArrayFloatIndexExists(_r, _ar))	// both values in array
			_l = _r+1;	// start at _r+1 to prevent double-checking values
			_r = _l + _step;
			_step += _seed * _counter;

		else if (!ArrayFloatIndexExists(_l, _ar) && !ArrayFloatIndexExists(_r, _ar))	// no values in array
				return _l;	// stepped one over _r previously, last index must be _l-1, return _l to compenstate for count vs. index off-by-one

		else 	// bottom value in array, top not. Half top and step bottom
			_step = _r; // temporary storage of the _r variable
			_l = _l+1; // increment _l to prevent double-checking values
			_r = _l + integer((_r - _l)/2);	// half the distance between _l and _r
			_step -= _r; // difference between old _r and new _r

		end if
	end repeat;
end 

// END "ArrayFloatCount.fxscript"



// INCLUDE "makeLevelMapBez.fxscript" v1.2

on makeLevelMapBez(float _lmap, value _inBlack, value _gamma, value _inWhite, value _outBlack, value _outWhite)
		// requires ArrayFloatCount.fxscript
		
		// uses BezToLevelMap to generate an adjustment level map for image correction.
		// results have been calibrated against the slower makeLevelMapFN
		// inputs are the adjustment array and five standard levels adjustment settings

		//note (11-14-04): output white seems over-sensitive? blowing out around output-white 220
		

	float _j, _D1, _D2, _mapLength;
	point _Lpt, _Rpt, _Cpt1, _Cpt2;

	// enforce limits
	_gamma = (_gamma > 10) ? 10:_gamma;
	_gamma = (_gamma < 0.1) ? 0.1:_gamma;
	_gamma = (_gamma < 1) ? 1- (1-_gamma) * 0.9 : _gamma;

	
	_mapLength = ArrayFloatCount(_lmap)-1;
	_gamma = 1/_gamma; // invert value to match Photoshop's values
	_outBlack = (_outWhite-_outBlack > 0) ? _outBlack : _outWhite-1;	// corrects for  reversal of inWhite and inBlack

	_Lpt = {_inBlack/_mapLength, _outBlack/_mapLength};
	_Rpt = {_inWhite/_mapLength, _outWhite/_mapLength};
	
	if (_gamma > 1)
		_j = power(_gamma/10, exp(1))
		_D1 = 1 - 1/_gamma - _j/10;
		_D2 = _j;
		_Cpt1.x = sin(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.x; 
		_Cpt1.y = cos(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.y;
	
		Interpolate(_Lpt, _Cpt1, (_inWhite-_inBlack)/255, _Cpt1)	// correct for input scaling (horizontal)
	
	else // gammma <= 1
		
		_j = power(1.825, -_gamma) - 0.445;	// I don't know why these numbers work, they were discovered after extensive testing and charting	
		_D1 = power(4,-_gamma) + _j/10 ;
		_D2 = 1-_gamma - _j
		
		_Cpt1.x = sin(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.x;
		_Cpt1.y = cos(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.y;
		
		Interpolate(_Lpt, _Cpt1, (_outWhite - _outBlack)/_mapLength, _Cpt1)		// correct for output scaling (vertical)

	end if
		
	Interpolate(_Cpt1, _Rpt, 1-_D2, _Cpt2)	// possibly save the subtraction by reversing the points...
	
	BezToLevelMap(_lmap, _Lpt, _Cpt1, _Cpt2, _Rpt, 0, _mapLength, TRUE);
	
	if (_inBlack > 0)
		_Cpt1 = {0, _Lpt.y};
		BezToLevelMap(_lmap, _Cpt1, _Cpt1, _Lpt, _Lpt, 0, _inBlack, TRUE);
	end if
	if (_inWhite < _mapLength)
		_Cpt1 = {1, _Rpt.y};
		BezToLevelMap(_lmap, _Rpt, _Rpt, _Cpt1, _Cpt1, _inWhite, _mapLength, TRUE);
	end if

end


// END "makeLevelMapBez.fxscript"





// INCLUDE "makeLevelMapBez.fxscript" v1.2

on makeLevelMapBezNEW(float _lmap, value _inBlack, value _gamma, value _inWhite, value _outBlack, value _outWhite)
		// requires ArrayFloatCount.fxscript
		
		// uses BezToLevelMap to generate an adjustment level map for image correction.
		// results have been calibrated against the slower makeLevelMapFN
		// inputs are the adjustment array and five standard levels adjustment settings

		//note (11-14-04): output white seems over-sensitive? blowing out around output-white 220
		// NOTE this uses 0-1 notation, need to roll this back into the main version of makeLevelMapBez
		//		_outBlack reversal correction is probably broken

	float _j, _D1, _D2, _mapLength;
	point _Lpt, _Rpt, _Cpt1, _Cpt2;

	// enforce limits
	_gamma = (_gamma > 10) ? 10:_gamma;
	_gamma = (_gamma < 0.1) ? 0.1:_gamma;
	_gamma = (_gamma < 1) ? 1- (1-_gamma) * 0.9 : _gamma;

	
	_mapLength = ArrayFloatCount(_lmap)-1;
	_gamma = 1/_gamma; // invert value to match Photoshop's values
	_outBlack = (_outWhite-_outBlack > 0) ? _outBlack : _outWhite-1;	// corrects for  reversal of inWhite and inBlack

	_Lpt = {_inBlack, _outBlack};
	_Rpt = {_inWhite, _outWhite};
	
	if (_gamma > 1)
		_j = power(_gamma/10, exp(1))
		_D1 = 1 - 1/_gamma - _j/10;
		_D2 = _j;
		_Cpt1.x = sin(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.x; 
		_Cpt1.y = cos(power(_gamma, log(2)/log(_gamma) - _j/10) * 45) * _D1 + _Lpt.y;
	
		Interpolate(_Lpt, _Cpt1, _inWhite-_inBlack, _Cpt1)	// correct for input scaling (horizontal)
	
	else // gammma <= 1
		
		_j = power(1.825, -_gamma) - 0.445;	// I don't know why these numbers work, they were discovered after extensive testing and charting	
		_D1 = power(4,-_gamma) + _j/10 ;
		_D2 = 1-_gamma - _j
		
		_Cpt1.x = sin(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.x;
		_Cpt1.y = cos(power(_gamma,exp(1)) * (90-AngleTo(_Lpt, _Rpt) )) * _D1 + _Lpt.y;
		
		Interpolate(_Lpt, _Cpt1, (_outWhite - _outBlack)/_mapLength, _Cpt1)		// correct for output scaling (vertical)

	end if
		
	Interpolate(_Cpt1, _Rpt, 1-_D2, _Cpt2)	// possibly save the subtraction by reversing the points...
	
	BezToLevelMap(_lmap, _Lpt, _Cpt1, _Cpt2, _Rpt, 0, _mapLength, TRUE);
	
	if (_inBlack > 0)
		_Cpt1 = {0, _Lpt.y};
		BezToLevelMap(_lmap, _Cpt1, _Cpt1, _Lpt, _Lpt, 0, _inBlack, TRUE);
	end if
	if (_inWhite < 1)
		_Cpt1 = {1, _Rpt.y};
		BezToLevelMap(_lmap, _Rpt, _Rpt, _Cpt1, _Cpt1, _inWhite, _mapLength, TRUE);
	end if

end


// END "makeLevelMapBez.fxscript"


// INCLUDE "makeThresholdMapBez.fxscript" v1.1

on makeThresholdMapBez(float _lmap, value _th, value _steps, value _mapLength)
		// a fast thresholding function using BezToLevelMap instead of for:next loops
		// _th is the point to thrreshold around, _steps are the number of grays around _th
		// mapLength is 255 for 8-bit maps
		
	point _p1, _p2;
	
	float _top, _bottom;
	
	if (_th - _steps/2 < 0)
		_steps = _th * 2;
	else if (_th + _steps/2 > _mapLength)
		_steps = (_mapLength - _th) * 2;
	end if
	
	if (_th & 1 == 0)	// even
		_p1 = {floor(_th - _steps/2)/_mapLength, 0};		
		_p2 = {floor(_th + _steps/2)/_mapLength, 1};		
	else // _th is odd
		_p1 = {ceil(_th - _steps/2)/_mapLength, 0};		
		_p2 = {ceil(_th + _steps/2)/_mapLength, 1};		
	end if

	BezToLevelMap(_lmap, _p1, _p1, _p2, _p2, 0, _mapLength, TRUE);

end


// END "makeThresholdMapBez.fxscript"


on ColorRampImage(image _img, color _fg, color _bg, value _thr, value _steps)

		// can convert an image into a two-color ramp in place with thresholding
		

	float _w, _h, _adj[256];
	dimensionsOf(_img, _w, _h);
	
	image _temp[_w][_h];
	
	Desaturate(_img, _img);
	channelcopy(_img, _img, kgreen, knone, knone, knone)


	makeThresholdMapBez(_adj, _thr, _steps, 255)	
	LevelMap(_img, _temp, _adj, linearRamp, linearRamp, linearRamp);
	
	channelfill(_img, _bg.a, _bg.r, _bg.g, _bg.b);
	channelfill(_temp, -1, _fg.r, _fg.g, _fg.b);
	matte(_temp, _img, _img, 1, kalpha);
	
	
	// may want to make this a source-dest function?
	// can be used with PlaceFrame to build a new Pixelizer
	

end 






on Bokeh(image _src, image _dest, point _centerPt, value _size, value _rings, value _spacing, value _points, value _angle, color _color, value _easing, value _easeMethod, value _fading, value _reverseFade)
	float _j, _k, _x,  _sideLength, _zoom, _c, _key[256], _preblur;
	point _pt0, _pt1, _pt2, _inBox[4], _outBox[4];
	dimensionsOf(_dest, _pt0.x, _pt0.y);
	image _src2[_pt0.x][_pt0.y], _img[_pt0.x][_pt0.y],_img1[_pt0.x][_pt0.y],_hilight[_pt0.x][_pt0.y], _hilight1[_pt0.x][_pt0.y];

	_dest = _src;

	_zoom = 1/RenderRes;
	_c = 1;
							color cWhite, cBlack
							cWhite *= 0;
							cWhite +=255;
							cBlack *=0;
							cBlack.a = 255;

	linearGamma(_src, _src2, 1/gamma);

//_spacing = cameraBlur/10;
	_spacing = camerablur/10;
	_rings = ceil(camerablur/2/_spacing);
	_preblur = camerablur/40;
	
	for _k = 1 to (_rings)
		_points = (_points == 11) ? ceil(3.141592653590 * cameraBlur/2 * _k * _spacing * _zoom/_spacing*1.6) : _points;
	
		blurChannel(_src2, _img1, _preblur * (_rings - _k), 1, 1, 1, 1, aspectOf(_dest));  

		for _j = 1 to (_points)

			boundsOf(_dest, _outBox);
			boundsOf(_src, _inBox);
			_pt0 = {cos(_j * 360/_points + _angle + _k/_rings * spiral * 180 ), sin(_j * 360/_points + _angle + _k/_rings * spiral * 180)};
			_pt0 *= (cameraBlur/2 - (_k-1)/_rings * camerablur/2)* _zoom;
			_pt0.y /= aspectOf(_dest);
			_outBox	+= _pt0;
			_pt0 += _centerPt;
			
			_pt1 = {cos((1+_j) * 360/_points + _angle + _k/_rings * spiral * 180 ), sin((1+_j) * 360/_points + _angle + _k/_rings * spiral * 180)};
			_pt1 *= (cameraBlur/2 - (_k-1)/_rings * camerablur/2)* _zoom;
			_pt1.y /= aspectOf(_dest);
			_pt1 += _centerPt;


		///	_spacing =  (camerablur/10 > 0.5) ? camerablur/10 : 0.5; 4 /// camerablur/10

			_sideLength = distTo(_pt0, _pt1);
			//if (_points < 11) // greater than spacing, in this case the diameter of the dot
			if (_sideLength > _spacing)
				for _x = 1 to integer(_sideLength/_spacing)
					_c++
					interpolate(_pt0, _pt1, _x/integer(_sideLength/_spacing), _pt2);
	//				DrawSoftDot(_dest, _pt2, kround,  dSize, 0, 0, kblue, 1, aspectOf(_dest));

					boundsOf(_dest, _outBox);
					_outBox	+= _pt2;

					if doImage
						blitRect(_img1, _inbox, _img, _outBox);
						if (method == 1);	matte(_img, _dest, _dest,  1/_c, kalpha); end if
						if (method == 2);	overlay(_dest, _img, _dest,  1/_c, kalpha); end if
						if (method == 3);	lighten(_dest, _img, _dest,  0.5, kalpha); end if

						
						if (method == 4);		
							_hilight = _img;
							ColorRampImage(_hilight, cWhite, cBlack, threshold, realBlur);
							channelcopy(_hilight,  _img, kgreen, knone, knone, knone);
							lighten(_dest, _img, _dest,  1, kalpha);
						end if
					end if
				next;
			else		// draw vertexes
				_c++
//				DrawSoftDot(_dest, _pt0, kround,  dSize, 0, 0, kred, 1, aspectOf(_dest));

				if doImage
					blitRect(_img1, _inbox, _img, _outBox);
					
					if (method == 1);	matte(_img, _dest, _dest,  1/_c, kalpha); end if
					if (method == 2);	overlay(_dest, _img, _dest,  1/_c, kalpha); end if
					if (method == 3);	lighten(_dest, _img, _dest,  0.5, kalpha); end if
						if (method == 4);		
							_hilight = _img;
							ColorRampImage(_hilight, cWhite, cBlack, threshold, realBlur);
							channelcopy(_hilight,  _img, kgreen, knone, knone, knone);
							lighten(_dest, _img, _dest,  1, kalpha);
						end if
				end if
			end if
		next;
	next;
	_pt2 = _centerPt;
	
	_c++;
//	DrawSoftDot(_dest, _pt2, kround,  dSize, 0, 0, kyellow, 1, aspectOf(_dest));

	
	//		if (method == 1);	matte(_img1, _dest, _dest,  1/_c, kalpha); end if
	//		if (method == 2);	lighten(_dest, _img, _dest,  0.5, kalpha); end if

	
///	linearGamma(_dest, _dest, gamma);
//	numreporter(_dest, _c, "iterations", kinteger, -30, 33, kcenterjustify);
end 



on linearGamma(image _src, image _dest, value _srcGamma)

	float _i, _adjKey[256];
	_adjKey +=1;
	

	for _i = 0 to 255
		_adjKey[_i] = power((_i-0)/255, _srcGamma); 
	next;
	
	
//	makeLevelMapBez(_adjKey, 0, 1/_srcGamma, 255, 0, 255);
	levelMap(_src, _dest, linearRamp, _adjKey, _adjKey, _adjKey);

end 



// Patches
float method, cRings, dSpacing, dSize, FadeDirection, doImage, realBlur;
method = 1;
dSize = 3;
FadeDirection = false;
doImage = true
realBlur = 10;




point dims;

dimensionsOf(dest, dims.x, dims.y);
dims *= 0;

float dFade, easing, easemethod, spiral;
color inColor;


if (!FadeDirection)
	Bokeh(src1, dest, dims, dSize, cRings, dSpacing, cSides, rotation, inColor, easing, easeMethod, dFade, FadeDirection);
else
	blurChannel(src1, dest, realBlur, 1, 1, 1, 1, aspectOf(dest));
end if


//linearGamma(src1, dest, gamma);

if (FadeDirection && gamma != 1)
//	linearGamma(dest, dest, 1/gamma);
end if

//	numreporter(dest, log10(gamma)/log10(0.5), "log10(gamma)/log10(0.5)", kfloat6, -70, 33, kcenterjustify);
