//                         v3.5 //	                  //	   wvwwvwvww    //	   \                  /  //	     \______/  //	                          	//       Joe's Filters     //     for Final Cut Pro//  & Final Cut Express// (C) 2003 Joe Maller// http://www.joesfilters.com// http://www.fxscriptreference.orgfilter "Joe's Channel Blur BETA";group "Joe's FCE Filters";input startBlur, "In Blur", slider, 0, 0, 100;input endBlur, "Out Blur", slider, 25, 0, 250;input easing, "Ease In/Out", slider, 0, -100, 100 detent -33, 33;//input BlurAmount, "Blur", Slider, 10, 0, 250 ramp 95;input aspect, "Aspect", Slider, 1, 0.1, 10 ramp 93.5 detent 1;input target, "Target", radiogroup, 1, "YUV (YCrCb)", "RGB";input rY, "Luma / Red", CheckBox, 1input gU, "Cb / Green", CheckBox, 1input bV, "Cr / Blue", CheckBox, 1input aA, "Alpha", CheckBox, 1;input v, "Show Values", Checkbox, 0;input title, "Joe's Filters", Label,"";input title1, "www.joesfilters.com", Label,"";InformationFlag("YUVaware");ProducesAlphacode//numreporter subroutine		On numReporter(value reporterData, string reporterstring, value subformat, value height)			string reporter;			color fontcolor;			fontcolor = {200,255,255,255};			settextfont("Verdana");			setTextstyle(kbold);			setTextjustify(kcenterjustify);			setTextSize(30 * zoomfactor);		//	ChannelFill(halfbuffer, 0, 0, 0, 0)			NumToString(reporterData, reporter, subformat); reporter = reporterstring + " " + reporter			DrawString(reporter, 0, height, 1.2,  dest, fontcolor , aspectof(dest))		End//end numreporterexposedbackground=1float w, h, colorSpace, AspectRadius, BlurAmount;colorSpace = GetPixelFormat(dest);			//store this for final conversion at the enddimensionsOf(Dest, w, h);float zoomfactor; zoomfactor = w/720;image xbuffer[w][h];xbuffer = src1;	float FCEratio; //FCEratio is an easing-adusted ratio value used to calculate the value between start and stop	easing = (easing < 0) ? easing/-50 : (easing-200)/-200;	FCEratio = power(ratio, easing);BlurAmount =  startBlur + (endBlur - startBlur) * FCEratio);	AspectRadius = (aspect > 1) ? 1: 1/aspect;Blur(src1, dest, (BlurAmount * zoomfactor) / AspectRadius, aspectOf(dest) * aspect)if target == 1;	//YUV	if GetPixelFormat(dest) != kFormatYUV219;		ConvertImage(dest, dest, kFormatYUV219);		ConvertImage(xbuffer, xbuffer, kFormatYUV219);	end ifelse if target == 2;	//RGB	if GetPixelFormat(dest) != kFormatRGB219;		ConvertImage(dest, dest, kFormatRGB219);		ConvertImage(xbuffer, xbuffer, kFormatRGB219);	end ifend if;rY = (rY == 1) ? knone : kRed;gU = (gU == 1) ? knone : kGreen;bV = (bV == 1) ? knone : kBlue;aA = (aA == 1) ? knone : kalphaChannelCopy(xbuffer, dest, aA, rY, gU, bV);if (v)        numReporter(FCEratio, "FCEratio:", kfloat4, h/2*0.75)	numReporter(easing, "easing:", kfloat2, h/2*0.65)end ifif GetPixelFormat(dest) != colorSpace;	//using colorspace makes this change back to whatever it started as	ConvertImage(dest, dest, colorSpace);end if