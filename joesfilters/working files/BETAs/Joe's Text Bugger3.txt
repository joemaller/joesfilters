//The following code is Joe's Text Bugger shareware reminder//FXScripts and filters for Final Cut Pro at www.joemaller.comfloat BUGduration, BUGseconds, BUGmark, BUGfade;string BUGshareware, BUGurl;BUGduration = (AspectOf(dest) < 1.2) ? duration : duration/2;		//unifies the field/frame duration discrepancy on PAL or NTSC 	BUGseconds = 3 	* fps; 										// minimum length in seconds of clips to watermarkBUGmark = 2 	* fps;										// duration of watermark in seconds from clip endBUGfade = 1/3 	* fps; 										// duration of fade-in, can also be a numerical value	BUGshareware = "JoeÕs Filters Beta";			// First line of textBUGurl = "www.joesfilters.com";			// second line of textif BUGduration/fps > 6; BUGmark = 2 * fps; end if;if BUGduration/fps > 15; BUGmark = 3 * fps; end if;if BUGduration/fps > 30; BUGmark = 4 * fps; end if;if BUGduration/fps > 45; BUGmark = 5 * fps; end if;if BUGduration/fps > 60; BUGmark = 6 * fps; end if;if BUGduration/fps > 120; BUGmark = 10 * fps; end if;if BUGduration/fps > 180; BUGmark = 20 * fps; end if;if BUGduration/fps > 300; BUGmark = 30 * fps; end if;		//randomizers: comment these out for exact values//	BUGseconds += (BUGduration mod 31)/10;				// changes the duration of targeted clip by adding up to 3 seconds//	BUGmark += (BUGduration mod 11)/10;					// changes the duration of the mark by adding up to 1 secondif BUGduration >= BUGseconds;							// checks the duration of the clip to see if it's long enough to be filtered	if BUGduration * ratio >= BUGduration - BUGmark;	// checks to see if the current frame is within the marking area			float BUGwidth, BUGheight, BUGjoeratio, BUGzoomfactor;		color BUGfontcolor;		dimensionsOf(Dest, BUGwidth, BUGheight);		image BUGxbuffer[BUGwidth][BUGheight], BUGxbuffer2[BUGwidth][BUGheight];		BUGzoomfactor = BUGwidth/720						setpixelformat(BUGxbuffer, getPixelFormat(dest)); 		setpixelformat(BUGxbuffer2, getPixelFormat(dest));	// for correct color on YUV effects		if (getPixelFormat(dest) == kFormatYUV219)			BUGfontcolor = {255,235,127,127};		else					BUGfontcolor = {255,235,235,235};		end if				channelFill(BUGxbuffer, 0, BUGfontcolor.r, BUGfontcolor.g, BUGfontcolor.b);		//BUGjoeratio = ((BUGduration * ratio) - (BUGduration - BUGmark)) / (1/3 * BUGmark);	//sets a bug-specific ratio value		BUGjoeratio = ((BUGduration * ratio) - (BUGduration - BUGmark)) / BUGfade;	//sets a bug-specific ratio value		BUGjoeratio = (BUGjoeratio > 1) ? 1 : BUGjoeratio;			settextfont("verdana"); setTextstyle(kbold); setTextjustify(kcenterjustify); setTextSize(34 * BUGzoomfactor);		DrawString(BUGshareware, 0, (0.75 * BUGheight * 0.5) - (30 * BUGzoomfactor/(aspectof(dest))), 2.25 * BUGzoomfactor, BUGxbuffer, kwhite, aspectof(dest))		setTextstyle(kplain); setTextSize(28 * BUGzoomfactor);		DrawString(BUGurl, 0, (0.75 * BUGheight * 0.5), 3.5 * BUGzoomfactor, BUGxbuffer, kwhite, aspectof(dest))				//	Blur(BUGxbuffer, BUGxbuffer2, 0.5 * BUGzoomfactor, aspectof(dest))		screen(dest, BUGxbuffer, dest, BUGjoeratio * 0.75, kalpha);	end if;end if;