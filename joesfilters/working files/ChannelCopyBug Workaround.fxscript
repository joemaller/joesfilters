Filter "ChannelCopy Bug Workaround RGB";
group "FXScript Bugs";

input copyFrom, "Copy From:", RadioGroup, 2, "kRed", "kGreen", "kBlue", "kAlpha";
input copyTo, "Copy To:", Popup, 1, "Alpha", "Red";

input doAlpha, "doAlpha", Popup, 2, "knone", "kAlpha", "kRed", "kGreen", "kBlue";
input doRed, "doRed", Popup, 3, "knone", "kAlpha", "kRed", "kGreen", "kBlue";
input doGreen, "doGreen", Popup, 4, "knone", "kAlpha", "kRed", "kGreen", "kBlue";
input doBlue, "doBlue", Popup, 5, "knone", "kAlpha", "kRed", "kGreen", "kBlue";

input doChannelCopyFixed, "ChannelCopyFixed", Checkbox, 1;

input showChannel, "Show Channel", Checkbox, 0;

InformationFlag("YUVaware");

ProducesAlpha;

code

exposedBackground = 1;







// Workaround for ChannelCopy shifting Green/Blue channels when copied to Alpha

on ChannelCopyFixed(image _src, image _dest, value _A, value _R, value _G, value _B)
		
 //	G or B needs to go through R, but R might be getting preserved. However, we are certain that A is getting obliterated.
 //			Shift dest.R into dest.A if _R == knone
 //			worst case scenerio: R == knone, G||B to alpha, switch G & B
		
		
		// This function is a drop-in replacement for ChannelCopy
		// there is a bug in FCP where the Green and Blue (or CrCb) channels will be slightly compressed when copied to the alpha channel
		// The solution is to copy those channels through the Red channel then copy to Alpha. 
		// In addition, there is one speed optimization for cases where many channels are swapped. In these cases a ColorTransform is faster than ChannelCopy
		
		
		float _swapCount;
		
		_swapCount = 0; // this is for optimizing the ColorTransform, more than one channel swapped is faster, only one channel swapped isn't
		_swapCount += integer(_R == kGreen || _R == kBlue);
		_swapCount += integer(_G == kRed || _G == kBlue);
		_swapCount += integer(_B == kRed || _B == kGreen);
		
	
			if ( _A != knone && !(_R==kAlpha || _G==kAlpha || _B==kAlpha) &&  !(_R==kNone || _G==kNone || _B==kNone) && !(_R==kRed && _G==kGreen && _B==kBlue) && _swapCount > 1)
				// this is a special speed exception: 
				//	kAlpha is not being copied to Red, Green or Blue
				// 	Red, Green or Blue are not being skipped (knone)
				//	red is not being copied to red
				//	green is not being copied to green
				//	blue is not being copied to blue

				//	DebugText("swapping");
			
				float _mat[3][3], _offset[3];
											
				_mat[0] = {	integer(_R==kRed), 		integer(_G==kRed),		integer(_B==kRed)};
				_mat[1] = {	integer(_R==kGreen),	integer(_G==kGreen),	integer(_B==kGreen)};
				_mat[2] = {	integer(_R==kBlue), 	integer(_G==kBlue),		integer(_B==kBlue)};
						
				ColorTransform(_src, _dest, _mat, _offset, _offset);
		
				// handle Alpha
				// the following conditions select each channel based on its transformed result
				
				if(_A == kAlpha)
		 			ChannelCopy(_src, _dest, kAlpha, kNone, kNone, kNone);

				else if (_A == kRed && _R == kRed) || (_A == kGreen && _R == kGreen) || (_A == kBlue && _R == kBlue) // copy kRed
					ChannelCopy(_dest, _dest, kred, knone, knone, knone);

				else if (_A == kRed && _G == kRed) || (_A == kGreen && _G == kGreen) || (_A == kBlue && _G == kBlue)
					ChannelCopy(_dest, _dest, kRed, kGreen, knone, knone);	// move Red out of the way
					ChannelCopy(_dest, _dest, kRed, kAlpha, knone, knone);

				else if (_A == kRed && _B == kRed) || (_A == kGreen && _B == kGreen) || (_A == kBlue && _B == kBlue)
					ChannelCopy(_dest, _dest, kRed, kBlue, knone, knone);
					ChannelCopy(_dest, _dest, kRed, kAlpha, knone, knone);
				
				else if (_A == kred)
					ChannelCopy(_src, _dest, kred, knone, knone, knone);
				
				else if (_A == kgreen || _A == kblue)
					ChannelCopy(_dest, _dest, kred, knone, knone, knone);
					ChannelCopy(_src, _dest, knone, _A, knone, knone);
				
				end if
	
			else if (_A == kgreen || _A == kblue)	
				if (_R == knone) // preserve kRed in Alpha
					DebugText("_R == knone, _A == kGreen || kBlue");
					ChannelCopy(_dest, _dest, kred, knone, knone, knone);	// move red out of the way because _R == knone, at 3 copies, this is the worst case scenerio
					ChannelCopy(_src, _dest, knone, _A, _G, _B);	
					ChannelCopy(_dest, _dest, kred, kAlpha, knone, knone);
				
				else	// red is getting obliterated, copy to Alpha and 
					DebugText("_A kGreen or kBlue, red getting replaced");
					ChannelCopy(_src, _dest, _R, _A, _G, _B);	
					ChannelCopy(_dest, _dest, kred, kAlpha, knone, knone);
				
				end if
			
			else // nothing special, do straight channelcopy
				DebugText("nothing special, pass to ChannelCopy");
				ChannelCopy(_src, _dest, _A, _R, _G, _B);
			
			end if
		
		
end


// INCLUDE "NumReporter.fxscript" r247

on NumReporter(image _destIMG, value _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd;
	string reporter;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	
	if (getPixelFormat(_destIMG)==kFormatYUV219)
		fontcolor = {255,235,128,128};
	else
		fontcolor = {255,235,235,235};
	end if
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize);
													
	NumToString(_data, reporter, _numberformat);
	reporter = _label + " = " + reporter;
	DrawString(reporter, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));

end

// END "NumReporter.fxscript"




// adjust input values to match channel constants:
doAlpha += (doAlpha < 3) ? -3 : 11;
doRed += (doRed < 3) ? -3 : 11;
doGreen += (doGreen < 3) ? -3 : 11;
doBlue += (doBlue < 3) ? -3 : 11;


// Set up extra image; fill dest white/opaque; fill img black/transparent; draw opaque line onto img
point p1, p2; DimensionsOf(dest, p1.x, p1.y); image img[p1.x][p1.y];


ChannelFill(dest, 255, 255, 255, 255); 
ChannelFill(img, 0, 0, 0, 0);

color k; k = {255, 255, 255, 255}
p1 = {-100,-100}; p2={100,100};
Line(p1, p2, img, k, 25);


if (false)
	if (doChannelCopyFixed)
		if (copyTo == 1)	// Copy channels to Alpha
			if 		(copyFrom == 1); 	ChannelCopyFixed(img, dest,	kred,	knone,	knone,	knone);	
			else if (copyFrom == 2);	ChannelCopyFixed(img, dest,	kgreen,	knone,	knone,	knone);	
			else if (copyFrom == 3);	ChannelCopyFixed(img, dest,	kblue,	knone,	knone,	knone);	
			else if (copyFrom == 4);	ChannelCopyFixed(img, dest,	kalpha,	knone, 	knone,	knone);	
			end if		
		else if (copyTo == 2)	// Copy channels to red
			if 		(copyFrom == 1); 	ChannelCopyFixed(img, dest, knone,	kred,	knone, 	knone);	
			else if (copyFrom == 2);	ChannelCopyFixed(img, dest, knone,	kgreen,	knone, 	knone);	
			else if (copyFrom == 3);	ChannelCopyFixed(img, dest, knone,	kblue,	knone, 	knone);	
			else if (copyFrom == 4);	ChannelCopyFixed(img, dest, knone,	kalpha,	knone, 	knone);	
			end if
		end if
	else	// do regular ChannelCopy
		if (copyTo == 1)	// Copy channels to Alpha
			if 		(copyFrom == 1); 	ChannelCopy(img, dest,	kred,	knone,	knone,	knone);	
			else if (copyFrom == 2);	ChannelCopy(img, dest,	kgreen,	knone,	knone,	knone);	
			else if (copyFrom == 3);	ChannelCopy(img, dest,	kblue,	knone,	knone,	knone);	
			else if (copyFrom == 4);	ChannelCopy(img, dest,	kalpha,	knone, 	knone,	knone);	
			end if		
		else if (copyTo == 2)	// Copy channels to red
			if 		(copyFrom == 1); 	ChannelCopy(img, dest, knone,	kred,	knone, 	knone);	
			else if (copyFrom == 2);	ChannelCopy(img, dest, knone,	kgreen,	knone, 	knone);	
			else if (copyFrom == 3);	ChannelCopy(img, dest, knone,	kblue,	knone, 	knone);	
			else if (copyFrom == 4);	ChannelCopy(img, dest, knone,	kalpha,	knone, 	knone);	
			end if
		end if
	end if
end if

if (true)
	
	img = src1
	float x;
	for x = 1 to 20
		if (doChannelCopyFixed)
			Channelcopyfixed(img, dest, doAlpha, doRed, doGreen, doBlue)
		else
			Channelcopy(img, dest, doAlpha, doRed, doGreen, doBlue)
	
		end if
	next
end if

if (showChannel)	// show the alpha result
	if (copyTo == 0)			// show alpha
		ChannelCopy(dest, dest, knone, kalpha, kalpha, kalpha);
	else if (copyTo == 1)		// show red
		ChannelCopy(dest, dest, knone, kred, kred, kred);
	end if
	
	ChannelFill(dest, 255, -1, -1, -1);

	// draw white and black reference lines
	p1 = {-10,-50}; p2 = {-10,50}; Line(p1, p2, dest, k, 12);
	k = {255, 0, 0, 0};
	p1 = {10,-50}; p2 = {10,50}; Line(p1, p2, dest, k, 12);
end if


//NumReporter(dest, doAlpha, "kred", kFloat2, 0, 32, kCenterJustify);