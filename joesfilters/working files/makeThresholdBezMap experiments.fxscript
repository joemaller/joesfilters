// next step: Integrate YUV + RGB keying into the same function.




filter "testing makeThresholdBezMap";
group "nopthing";

input keyColor, "Key Color", Color, 255, 22, 22, 255;

//	input rthreshold, "Threshold", slider, 100, 0, 255;
//	input gthreshold, "Threshold", slider, 100, 0, 255;
//	input bthreshold, "Threshold", slider, 100, 0, 255;

input width, "width", slider, 10, 0, 255
input softness, "softness", slider, 25, 0, 255;

input rWidth, "rWidth", Slider, 10, 1, 255;
input gWidth, "gWidth", Slider, 10, 1, 255;
input bWidth, "bWidth", Slider, 10, 1, 255;

input yWidth, "Luma Width", Slider, 10, 1, 255;
input cWidth, "Chroma Width", Slider, 5, 1, 255;

input monoChannel, "Monochrome", Checkbox, 0;

input YUVorRGB, "YUV or RGB", RadioGroup, 1, "YUV", "RGB";


input showOriginal, "Show Original", radiogroup, 1, "Original", "Red", "Green", "Blue", "passthrough";

input doRGBkey, "doRGBkey", checkbox, 0;
input RGBKeySoftness, "RGBKey Softness adjust", slider, 1, 0, 255;
input RGBKeyWidth, "RGBKey Width", slider, 1, 0, 255;

InformationFlag("YUVaware");


code




// INCLUDE "ColorReporter.fxscript" r124

on ColorReporter(image _destIMG, color _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd, rzoom;
	string _reporterA, _reporterR, _reporterG, _reporterB;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data.a, _reporterA, _numberformat);
	NumToString(_data.r, _reporterR, _numberformat);
	NumToString(_data.g, _reporterG, _numberformat);
	NumToString(_data.b, _reporterB, _numberformat);
	_reporterR = _label + " = {" + _reporterA + "," + _reporterR + "," + _reporterG + "," + _reporterB + "}";
	DrawString(_reporterR, -1, _h - 1, 1.25,  _destIMG, fontColor, aspectof(_destIMG));
	DrawString(_reporterR, 1, _h + 1, 1.25,  _destIMG, kblack, aspectof(_destIMG));
	DrawString(_reporterR, 0, _h, 1.25,  _destIMG, _data, aspectof(_destIMG));

end 

// END "ColorReporter.fxscript"



// INCLUDE "basic_math.fxscript" r128

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 

// END "basic_math.fxscript"




// INCLUDE "RGBtoYUVcolor.fxscript" r160

on RGBtoYUVcolor(color _rgbColor)
	color _temp;
	_temp = _rgbColor
	_rgbColor.r = _temp.r * 0.299 + _temp.g * 0.587 + _temp.b * 0.114 
	_rgbColor.g = _temp.r * -0.169 + _temp.g * -0.332 + _temp.b * 0.500 + 128; 
	_rgbColor.b = _temp.r * 0.500 + _temp.g * -0.419 + _temp.b * -0.0813 + 128;
end 

// END "RGBtoYUVcolor.fxscript"



// INCLUDE "ChannelCopyFit.fxscript" r49

on ChannelCopyFit(image _src, image _dest, value _A, value _R, value _G, value _B)
	// a combination of channelcopy and blitrect, scales any specified channel to fit the target
	// specifically for cases where a channel source is not the same size as the channel destination
	// _A, _R, _G & _B work just like Channelcopy and are of the set {kalpha, kred, kgreen, kblue}
	// This is meant to be a more versatile drop-in replacement for ChannelCopy
	
	point _srcBox[4], _destBox[4];
	boundsOf(_src, _srcBox);
	boundsOf(_dest, _destBox);

	if (_srcBox[2] == _destBox[2])
		// sizes are equal, normal channelcopy...
		channelCopy(_src, _dest, _A, _R, _G, _B);

	else	// sizes are unequal, do blit then channel
		
		
		//		check for size differences
		// 		do channelcopy on larger image to preserve resolution 
				
		if (_srcBox[2].x * _srcBox[2].y < _destBox[2].x * _destBox[2].y)	// _src is smaller than _dest
			image _temp[_destBox[1].x - _destBox[0].x][_destBox[3].y - _destBox[0].y]; // create second dest-sized image buffer
			blitRect(_src, _srcBox, _temp, _destBox);
			channelCopy(_temp, _dest, _A, _R, _G, _B);
		
		else // _src is larger than _dest
			image _temp[_srcBox[1].x - _srcBox[0].x][_srcBox[3].y - _srcBox[0].y]; // create second src-sized image buffer
			blitRect(_dest, _destBox, _temp, _srcBox);
			channelCopy(_src, _temp, _A, _R, _G, _B);
			blitRect(_temp, _srcBox, _dest, _destBox);
		
		end if
	end if
end

// END "ChannelCopyFit.fxscript"






// INCLUDE "makeThresholdMapBez.fxscript" r130

on makeThresholdMapBez(float _lmap, value _th, value _steps, value _mapLength)
		// a fast thresholding function using BezToLevelMap instead of for:next loops
		// _th is the point to threshold around, _steps are the number of grays around _th
		// mapLength is 255 for 8-bit maps
		
	point _p1, _p2;
	
	if (_th - _steps/2 < 0)
		_steps = _th * 2;
	else if (_th + _steps/2 > _mapLength)
		_steps = (_mapLength - _th) * 2;
	end if
	
	_p1 = {floor(_th - _steps/2)/_maplength, 0};
	_p2 = {ceil (_th + _steps/2)/_mapLength, 1};

	BezToLevelMap(_lmap, _p1, _p1, _p2, _p2, 0, _mapLength, TRUE);

end

// END "makeThresholdMapBez.fxscript"

on makeKeyMapBez(float _kmap, value _center, value _width, value _softness, value _mapLength)
		// a fast keying replacement function using BezToLevelMap 
		// this can spike a single value from a LUT using back to back threshold operations.
		// _th is the point to threshold around, _steps are the number of grays around _th
		// mapLength is 255 for 8-bit maps
		
		// _width is the space between softness. The plateau between _startSoft+_softness/2 and _endSoft-softness/2
		
	point _p1, _p2;
	float _startSoft, _startWidth, _endWidth, _endSoft, _inHeight, _outHeight;
	
	_startWidth = _center - _width/2;
	_startSoft = integer(_startWidth - _softness/2);
	if (_startWidth > 0)
		_startWidth = integer(_startWidth)
		if (_startSoft < 0)
			_inHeight = -_startSoft/(_softness/2);
			_startSoft = 0;
		end if
	else
		_startWidth = 0;
		_startSoft = 0;
		_inHeight = 1;
	end if
	
	_endWidth = _center + _width/2;
	_endSoft = integer(_endWidth + _softness/2); 
	if (_endWidth < _mapLength)
		_endWidth = integer(_endWidth);
		if (_endSoft > _mapLength)
			_outHeight = (_endSoft-_mapLength)/(_softness/2);
			_endSoft = _mapLength;
		end if
	else
		_endWidth = _mapLength; 
		_endSoft = _mapLength;
		_outHeight = 1;
	end if
			
	_kmap *=0; // zero out array, zero-indexes will not be reassigned.
	
	_p1 = {0, _inHeight};
	_p2 = {(_softness/2)/(_softness/2 + _width), 1};

	// first assignment goes from beginning of softness through end of width
	BezToLevelMap(_kmap, _p1, _p1, _p2, _p2, _startSoft, _endWidth, TRUE);

	_p1 = {0, 1};
	_p2 = {1, _outHeight};

	// second assignment is only the trailing softness falloff
	BezToLevelMap(_kmap, _p1, _p1, _p2, _p2, _endWidth, _endSoft, TRUE);

end


on joesColorKey(image _src, image _dest, color _keyColorRGB, value _rWidth, value _gWidth, value _bWidth, value _yWidth, value _cbWidth, value _crWidth, value _softness, value _YUVorRGB)
// DEPENDENCIES:
//		channelcopyfit()
//		makeKeyMapBez()

// this isn't a dropin replacement for RGBColorKey
// Is there a good reason to use three value-floats for the color values instead of just sending a color?

// conciously not recycling image buffers in here to be sure everything is working. Probably should do that later.

	float _w, _h, _rMap[256], _gMap[256], _bMap[256], _yMap[256], _cbMap[256], _crMap[256];
	color _keyColorYUV;
	DimensionsOf(dest, _w, _h);
	image _rgbIMG[_w][_h];
	image _yuvIMG[_w][_h];

	_keyColorYUV = _keyColorRGB;
	RGBtoYUVcolor(_keyColorYUV);

	makeKeyMapBez(_rMap, _keyColorRGB.r, _rWidth, _softness, 255);
	makeKeyMapBez(_gMap, _keyColorRGB.g, _gWidth, _softness, 255);
	makeKeyMapBez(_bMap, _keyColorRGB.b, _bWidth, _softness, 255);

	makeKeyMapBez(_yMap, _keyColorYUV.r, _yWidth, _softness, 255);
	makeKeyMapBez(_cbMap, _keyColorYUV.g, _cbWidth, _softness, 255);
	makeKeyMapBez(_crMap, _keyColorYUV.b, _crWidth, _softness, 255);

	convertImage(_src, _rgbIMG, kFormatRGB219);
	convertImage(_src, _yuvIMG, kFormatYUV219);
	
	levelMap(_rgbIMG, _rgbIMG, linearRamp, _rMap, _gMap, _bMap);
	levelMap(_yuvIMG, _yuvIMG, linearRamp, _yMap, _cbMap, _crMap);

//	image _img1[_w][_h];
//	ChannelCopy(_yuvIMG, _img1, kalpha, kgreen, kred, kgreen);
//	Matte(_img1, _yuvIMG, _img1, 0.5, kAlpha);	// mix red and green into _img1 red
//	ChannelCopy(_img1, _img1, kalpha, knone, knone, kred);
//	Matte(_img1, _yuvIMG, _img1, 0.33333, kAlpha);

	// 	ImageAND(_rgbIMG, _yuvIMG, _dest)	// RY, GU, BV
	//	ChannelCopy(_dest, _rgbIMG, kalpha, kgreen, knone, knone);
	//	ChannelCopy(_dest, _yuvIMG, kalpha, kblue, knone, knone);
	//	ImageAnd(_dest, _rgbIMG, _dest);	// RYGU, ??, ??
	//	ImageAnd(_dest, _yuvIMG, _dest);	// RYGUBV, ??, ??
//		
	//	channelfill(_yuvIMG, 255, -1, 128, 128);
	//convertImage(_yuvIMG, _rgbIMG, kFormatRGB219);

	if (_YUVorRGB == kformatYUV219)
		_dest = _yuvIMG;
	else if (_YUVorRGB == kformatRGB219)
		_dest = _rgbIMG;
	end if
end


YUVorRGB = (YUVorRGB == 1) ? kFormatYUV219 : kformatRGB219;
convertimage(dest, dest, YUVorRGB);
joesColorKey(src1, dest, keyColor, Width, Width, Width, yWidth, cWidth, cWidth, softness, YUVorRGB);


if (showOriginal == 1)
	dest = src1;
else if (showOriginal == 2)
		
	ChannelCopy(dest, dest, kalpha, kred, kred, kred);
	if (monoChannel); 
		channelfill(dest, 255, -1, 128, 128); 
	end if

else if (showOriginal == 3)
	ChannelCopy(dest, dest, kalpha, kgreen, kgreen, kgreen);
	if (monoChannel); 
		channelcopy(dest, dest, kalpha, kgreen, knone, knone);
		channelfill(dest, 255, -1, 128, 128); 
	end if

else if	(showOriginal == 4)
	ChannelCopy(dest, dest, kalpha, kblue, kblue, kblue);
	if (monoChannel); 
		channelcopy(dest, dest, kalpha, kblue, knone, knone);
		channelfill(dest, 255, -1, 128, 128); 
	end if

else if	(showOriginal == 5)
	// passthrough

end if




if (doRGBkey)
convertimage(src1, src1, kformatRGB219);
convertimage(dest, dest, kformatRGB219);

	RGBColorKey(src1, dest, keyColor.r, RGBKeyWidth, keyColor.g, RGBKeyWidth, keyColor.b, RGBKeyWidth, RGBKeySoftness, 1)
//	YUVColorKey(src1, dest, keyColor.r, width, keyColor.g, width, keyColor.b, width, softness, 1)
	Invert(dest, dest)
end if