 //	Next steps:
 //		custom start shape?
 //		composite over original image
 //		output as mask (for applying corrections)




filter "Vingette Tests";
group "BETA";

input centerPt, "Center", Point, 0, 0;
input doOval, "do Oval", Checkbox, 0;

input divisor, "divisor", Slider, 25, 1, 50;

input doBlur, "do Blur", Checkbox, 1;
//	input showChannels, "Show Channels", r, 0;

input showChannels, "showChannels", RadioGroup, 1, "Merged", "Red (opacity ramp)", "Green (Overall Opacity)", "Red/Green";

input outerColor, "outerColor", Color, 255, 127, 22, 0;
input outerColorOpacity, "outerColorOpacity", Slider, 25, 0, 255;

input innerColor, "End Color", Color, 255, 11, 22, 120;
input innerColorOpacity, "innerColorOpacity", Slider, 225, 0, 255;

input checkAlpha, "checkAlpha", Checkbox, 0;



producesalpha;
//	InformationFlag("YUVaware");

code

exposedBackground=1;





// INCLUDE "RGBtoYUVcolor.fxscript" r160

on RGBtoYUVcolor(color _rgbColor)
	color _temp;
	_temp = _rgbColor
	_rgbColor.r = _temp.r * 0.299 + _temp.g * 0.587 + _temp.b * 0.114 
	_rgbColor.g = _temp.r * -0.169 + _temp.g * -0.332 + _temp.b * 0.500 + 128; 
	_rgbColor.b = _temp.r * 0.500 + _temp.g * -0.419 + _temp.b * -0.0813 + 128;
end 

// END "RGBtoYUVcolor.fxscript"




// INCLUDE "ChannelCopyFixed.fxscript" r275

on ChannelCopyFixed(image _src, image _dest, value _A, value _R, value _G, value _B)
			
	// This function is a drop-in replacement for ChannelCopy
	// there is a bug in FCP where the Green and Blue (or CrCb) channels will be slightly compressed when copied to the alpha channel
	// The solution is to copy those channels through the Red channel then copy to Alpha. 
	// In addition, there is one speed optimization for cases where many channels are swapped. In these cases a ColorTransform is faster than ChannelCopy
	
	
	float _swapCount;
	
	_swapCount = 0; // this is for optimizing the ColorTransform, more than one channel swapped is faster, only one channel swapped isn't
	_swapCount += integer(_R == kGreen || _R == kBlue);
	_swapCount += integer(_G == kRed || _G == kBlue);
	_swapCount += integer(_B == kRed || _B == kGreen);
	

	if ( _A != knone && !(_R==kAlpha || _G==kAlpha || _B==kAlpha) &&  !(_R==kNone || _G==kNone || _B==kNone) && !(_R==kRed && _G==kGreen && _B==kBlue) && _swapCount > 1)
		// this is a special speed exception: 
		//	kAlpha is not being copied to Red, Green or Blue
		// 	Red, Green or Blue are not being skipped (knone)
		//	red is not being copied to red
		//	green is not being copied to green
		//	blue is not being copied to blue

		//	DebugText("swapping");
	
		float _mat[3][3], _offset[3];
									
		_mat[0] = {	integer(_R==kRed), 		integer(_G==kRed),		integer(_B==kRed)};
		_mat[1] = {	integer(_R==kGreen),	integer(_G==kGreen),	integer(_B==kGreen)};
		_mat[2] = {	integer(_R==kBlue), 	integer(_G==kBlue),		integer(_B==kBlue)};
				
		ColorTransform(_src, _dest, _mat, _offset, _offset);

		// handle Alpha
		// the following conditions select each channel based on its transformed result
		
		if(_A == kAlpha)
 			ChannelCopy(_src, _dest, kAlpha, kNone, kNone, kNone);

		else if (_A == kRed && _R == kRed) || (_A == kGreen && _R == kGreen) || (_A == kBlue && _R == kBlue) // copy kRed
			ChannelCopy(_dest, _dest, kred, knone, knone, knone);

		else if (_A == kRed && _G == kRed) || (_A == kGreen && _G == kGreen) || (_A == kBlue && _G == kBlue)
			ChannelCopy(_dest, _dest, kRed, kGreen, knone, knone);	// move Red out of the way
			ChannelCopy(_dest, _dest, kRed, kAlpha, knone, knone);

		else if (_A == kRed && _B == kRed) || (_A == kGreen && _B == kGreen) || (_A == kBlue && _B == kBlue)
			ChannelCopy(_dest, _dest, kRed, kBlue, knone, knone);
			ChannelCopy(_dest, _dest, kRed, kAlpha, knone, knone);
		
		else if (_A == kred)
			ChannelCopy(_src, _dest, kred, knone, knone, knone);
		
		else if (_A == kgreen || _A == kblue)
			ChannelCopy(_dest, _dest, kred, knone, knone, knone);
			ChannelCopy(_src, _dest, knone, _A, knone, knone);
		
		end if

	else if (_A == kgreen || _A == kblue)	
		if (_R == knone) // preserve kRed in Alpha
			DebugText("_R == knone, _A == kGreen || kBlue");
			float _w, _h;
			DimensionsOf(_dest, _w, _h);
			image _img2[_w][_h];
			
			//	ChannelCopy(_src, _img2, knone, kgreen, knone, knone);	// move red out of the way because _R == knone, at 3 copies, this is the worst case scenerio
			//	ChannelCopy(_src, _dest, knone, _A, _G, _B);	
			//	ChannelCopy(_dest, _dest, kred, kAlpha, knone, knone);
			
			//	ChannelCopy(_src, _img2, kred, kgreen, knone, knone);
			ChannelCopy(_src, _img2, _R, _A, _G, _B);	
			ChannelCopy(_img2, _dest, kred, _R, _G, _B);
			
		
		else	// red is getting obliterated, copy to Alpha 
			DebugText("_A kGreen or kBlue, red getting replaced");
			ChannelCopy(_src, _dest, _R, _A, _G, _B);	
			ChannelCopy(_dest, _dest, kred, kAlpha, knone, knone);
		
		end if
	
	else // nothing special, do straight channelcopy
		DebugText("nothing special, pass to ChannelCopy");
		ChannelCopy(_src, _dest, _A, _R, _G, _B);
	
	end if
		
end

// END "ChannelCopyFixed.fxscript"


// INCLUDE "NumReporter.fxscript" r247

on NumReporter(image _destIMG, value _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd;
	string reporter;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	
	if (getPixelFormat(_destIMG)==kFormatYUV219)
		fontcolor = {255,235,128,128};
	else
		fontcolor = {255,235,235,235};
	end if
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize);
													
	NumToString(_data, reporter, _numberformat);
	reporter = _label + " = " + reporter;
	DrawString(reporter, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));

end

// END "NumReporter.fxscript"


// INCLUDE "PtReporter.fxscript" r124

on PtReporter(image _destIMG, point _data, string _label, value _numberformat, value _h, value _fontsize, value _justification)
	
	float rw, rh, ra, rd, rzoom;
	string reporterX, reporterY;
	color fontcolor;
	
	DimensionsOf(_destIMG, rw, rh);
	rzoom = rw/720;
	
	fontcolor = {255,235,235,235};
	settextfont("verdana");
	setTextstyle(kbold);
	setTextjustify(_justification);
	setTextSize(_fontsize * rzoom);
													
	NumToString(_data.x, reporterX, _numberformat);
	NumToString(_data.y, reporterY, _numberformat);
	reporterX = _label + " = {" + reporterX + "," + reporterY + "}";
	DrawString(reporterX, 0, _h, 1.25,  _destIMG, fontcolor, aspectof(_destIMG));

end

// END "PtReporter.fxscript"

// INCLUDE "basic_math.fxscript" r128

on max(value _a, value _b); return (_a > _b) ? _a : _b; end 
on min(value _a, value _b); return (_a < _b) ? _a : _b; end 
on ceil(value _x); return(((_x - integer(_x)) > 0) ? integer(_x) + 1 : integer(_x)); end 
on floor(value _x); return(((_x - integer(_x)) < 0) ? integer(_x) - 1 : integer(_x)); end 

// END "basic_math.fxscript"





on InterpolateBox(point _box1, point _box2, value _percent, point _outBox)
	//	float _x;
	//	for _x = 0 to 3
	//		Interpolate(_box1[_x], _box2[_x], _percent, _outBox[_x]);
	//	next;
	
	_outBox = _box2;
	_outBox -= _box1;
	_outBox *= _percent;
	_outBox += _box1;
end



on vignette(image _dest, point _startPoly, point _endPoly, color _outerColor, color _innerColor, value _doOval)
	// could add color ramp bending by using the ease functions
	// instead of reversing the loop here, reverse the input polys

	// DEPENDENCIES:
	//		basic math
	//		InterpolateBox
	
	
	float _iterations, _i, _w, _h, _colorSpace;
	point _iBox[4];
	color _iColor;

	DimensionsOf(dest, _w, _h);
	image _img0[_w][_h], _img1[_w][_h];

	if (doOval)
		_startPoly *= 2 * cos(45);
	end if
	
	/// calculate iterations by max vertex distance between the two polys
	_iterations = integer(max(distTo(_startPoly[0], _endPoly[0]), max(distTo(_startPoly[1], _endPoly[1]), max(distTo(_startPoly[2], _endPoly[2]), distTo(_startPoly[3], _endPoly[3])))));
	_iterations /= divisor;
	_iterations = min(_iterations, _w/2);	// limit _iterations to half the width of the frame to prevent runoffs with large frames and off-screen placement
	
	_iColor = {255, _outerColor.a,0, 0}; // setup initial fill color
	
	if (doOval)
		FillPoly(_startPoly, _dest, _iColor);	// fill _startPoly first to eliminate circle edges
	end if

	//	float debug1,debug2,debug3
	//	DebugText("START RAMP **********************");
	
	for _i = 0 to _iterations
		interpolateBox(_startPoly, _endPoly, _i/_iterations, _iBox)

			// use red for input alpha mask
			// use green for full alpha transition
			_iColor.r = (_outerColor.a - _innerColor.a) * (1-_i/_iterations) + _innerColor.a;
			_iColor.g = (_i/_iterations) * 255;
		
		if (_doOval)
			frameOval(_iBox, _img0, _iColor, divisor+3)
		else 
			FramePoly(_iBox, _img0, _iColor, divisor+1);			
		end if
		
		//	debug1 = _iColor.r;
		//	debug2 = _iColor.g
		//	DebugText("_iColor.r,g", debug1, debug2);
		//	
		//	ColorOf(_img0, _iBox[0], _iColor)
		//	debug1 = _iColor.r;
		//	debug2 = _iColor.g
		//	DebugText("_iColor.r,g", debug1, debug2, " sampled");
		
		
	next;
	
	//	DebugText("END RAMP **********************");
	
	_iColor = {255, _innerColor.a, 255, 0}; // setup ending fill color
	
	if (doOval)
		FillOval(_endPoly, _img0, _iColor)
		frameOval(_endPoly, _img0, _iColor, divisor+3)
	else
		FillPoly(_endPoly, _img0, _iColor);
		FramePoly(_endPoly, _img0, _iColor, divisor+1);
	end if
	
	// The frame-drawing funcitons seem to draw inside the 16-235 value range. Force-expand this to fit 0-255 for correct alphas
	float _lut[256]
	point _l, _r;
	_l = {16/256, 0};
	_r = {235/256, 1};
	BezToLevelMap(_lut, _l, _l, _r, _r, 0, 255, TRUE);
	LevelMap(_img0, _img0, linearRamp, _lut, _lut, linearRamp);
	
		
		
	if (doBlur)
		BlurChannel(_img0, _dest, divisor + 5, 1, 1, 1, 1, AspectOf(_dest));
	else
	 	_dest = _img0;
	end if
	

	if (showChannels == 1)
		ChannelCopy(_dest, _img0, kGreen, kGreen, kGreen, kGreen);	// not sure why, but the channel must be copied everywhere, otherwise the channel gets corrupted
		ChannelCopy(_img0, _img0, kred, knone, knone, knone);	// transfer green to alpha via kRed
	
		ChannelFill(_img1, 255, _outerColor.r, _outerColor.g, _outerColor.b);
	
		ChannelFill(_img0, -1, _innerColor.r, _innerColor.g, _innerColor.b);
	
		Matte(_img0, _img1, _img1, 1, kAlpha);
		
		ChannelCopy(_dest, _dest, kRed, kRed, kRed, kRed);	// not sure why, but the channel must be copied everywhere, otherwise the channel gets corrupted
		ChannelCopy(_img1, _dest, knone, kRed, kGreen, kBlue);
	
		if (checkAlpha)
			ChannelCopy(_dest, _dest, knone, kalpha, kalpha, kalpha);
			ChannelFill(_dest, 255, -1, -1, -1);
		end if
	else if (showChannels > 1)
		
		if (showChannels == 2)
			channelfill(_dest, 255, -1, 0, 0)
		else if (showChannels == 3)
			channelfill(_dest, 255, 0, -1, 0)
		else 
			channelfill(_dest, 255, -1, -1, 0);
		end if
	end if
	

end




point dims;

DimensionsOf(dest, dims.x, dims.y);
centerPt *= dims;

point b1[4], b2[4];

BoundsOf(dest, b1);
MakeRect(b2, centerPt.x - dims.x/10, centerPt.y - dims.y/10, dims.x/5, dims.y/5);


outerColor.a = outerColorOpacity;
innerColor.a = innerColorOpacity;


vignette(dest, b1, b2, outerColor, innerColor, doOval)
